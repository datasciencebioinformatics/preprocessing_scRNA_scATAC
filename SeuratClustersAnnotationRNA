#####################################################################################
library(dplyr)
library(Seurat)
library(patchwork)
library(gridExtra)
library(ggplot2)
library(plyr)
library(SeuratObject)
library(Seurat)
library("harmony")

#####################################################################################
# Save whole workspace to working directory
#load("./all_data.RData")

# Set intput dir
cDNA_M1_dir="/home/felipe/snRNASeq_output/cDNA-M1/outs/filtered_feature_bc_matrix/"
cDNA_M2_dir="/home/felipe/snRNASeq_output/cDNA-M2/outs/filtered_feature_bc_matrix/"
cDNA_M3_dir="/home/felipe/snRNASeq_output/cDNA-M3/outs/filtered_feature_bc_matrix/"
cDNA_M4_dir="/home/felipe/snRNASeq_output/cDNA-M4/outs/filtered_feature_bc_matrix/"
cDNA_M5_dir="/home/felipe/snRNASeq_output/cDNA-M5/outs/filtered_feature_bc_matrix/"
cDNA_M6_dir="/home/felipe/snRNASeq_output/cDNA-M6/outs/filtered_feature_bc_matrix/"

# Set output dir
output_dir="/home/felipe/snRNASeq_output/results/"
# First, load the tables 
# Load table for all sample - aggreagate cellranger for the six samples
cDNAM1.Read10X<-Read10X(data.dir=cDNA_M1_dir, gene.column = 2, cell.column = 1, unique.features = TRUE, strip.suffix = FALSE)
cDNAM2.Read10X<-Read10X(data.dir=cDNA_M2_dir, gene.column = 2, cell.column = 1, unique.features = TRUE, strip.suffix = FALSE)
cDNAM3.Read10X<-Read10X(data.dir=cDNA_M3_dir, gene.column = 2, cell.column = 1, unique.features = TRUE, strip.suffix = FALSE)
cDNAM4.Read10X<-Read10X(data.dir=cDNA_M4_dir, gene.column = 2, cell.column = 1, unique.features = TRUE, strip.suffix = FALSE)
cDNAM5.Read10X<-Read10X(data.dir=cDNA_M5_dir, gene.column = 2, cell.column = 1, unique.features = TRUE, strip.suffix = FALSE)
cDNAM6.Read10X<-Read10X(data.dir=cDNA_M6_dir, gene.column = 2, cell.column = 1, unique.features = TRUE, strip.suffix = FALSE)

# Load table for all sample - aggreagate cellranger for the six samples
cDNAM1.pbmc <- CreateSeuratObject(counts = cDNAM1.Read10X, project = "cDNA-M1")
cDNAM2.pbmc <- CreateSeuratObject(counts = cDNAM2.Read10X, project = "cDNA-M2")
cDNAM3.pbmc <- CreateSeuratObject(counts = cDNAM3.Read10X, project = "cDNA-M3")
cDNAM4.pbmc <- CreateSeuratObject(counts = cDNAM4.Read10X, project = "cDNA-M4")
cDNAM5.pbmc <- CreateSeuratObject(counts = cDNAM5.Read10X, project = "cDNA-M5")
cDNAM6.pbmc <- CreateSeuratObject(counts = cDNAM6.Read10X, project = "cDNA-M6")

# The [[ operator can add columns to object metadata. This is a great place to stash QC stats
cDNAM1.pbmc[["percent.mt"]] <- PercentageFeatureSet(cDNAM1.pbmc, pattern = "mt")
cDNAM2.pbmc[["percent.mt"]] <- PercentageFeatureSet(cDNAM2.pbmc, pattern = "mt")
cDNAM3.pbmc[["percent.mt"]] <- PercentageFeatureSet(cDNAM3.pbmc, pattern = "mt")
cDNAM4.pbmc[["percent.mt"]] <- PercentageFeatureSet(cDNAM4.pbmc, pattern = "mt")
cDNAM5.pbmc[["percent.mt"]] <- PercentageFeatureSet(cDNAM5.pbmc, pattern = "mt")
cDNAM6.pbmc[["percent.mt"]] <- PercentageFeatureSet(cDNAM6.pbmc, pattern = "mt")

# Subset percent.mt < 2
cDNAM1.pbmc = subset(cDNAM1.pbmc, subset = percent.mt < 2)
cDNAM2.pbmc = subset(cDNAM2.pbmc, subset = percent.mt < 2)
cDNAM3.pbmc = subset(cDNAM3.pbmc, subset = percent.mt < 2)
cDNAM4.pbmc = subset(cDNAM4.pbmc, subset = percent.mt < 2)
cDNAM5.pbmc = subset(cDNAM5.pbmc, subset = percent.mt < 2)
cDNAM6.pbmc = subset(cDNAM6.pbmc, subset = percent.mt < 2)
#####################################################################################
# Merge samples
pbmc.merge.samples <- merge(cDNAM1.pbmc, y = c(cDNAM2.pbmc, cDNAM3.pbmc,cDNAM4.pbmc, cDNAM5.pbmc,cDNAM6.pbmc), add.cell.ids = c("cDNAM1","cDNAM2", "cDNAM3","cDNAM4","cDNAM5", "cDNAM6"), project = "hypothalamus")
pbmc.merge.samples = subset(pbmc.merge.samples, subset = percent.mt < 2)
#####################################################################################
# Add metadata seurat 
# Get the name of the samples
cluster_letters <- paste("cDNA-M",as.integer(Idents(object = pbmc.merge.samples)),sep="")
names(cluster_letters) <- colnames(x = pbmc.merge.samples)

# Replace identities by sex
cluster_letters[which(cluster_letters==c("cDNA-M1"))]<-"Male"
cluster_letters[which(cluster_letters==c("cDNA-M2"))]<-"Male"
cluster_letters[which(cluster_letters==c("cDNA-M3"))]<-"Male"
cluster_letters[which(cluster_letters==c("cDNA-M4"))]<-"Female"
cluster_letters[which(cluster_letters==c("cDNA-M5"))]<-"Female"
cluster_letters[which(cluster_letters==c("cDNA-M6"))]<-"Female"

# Add metadata
pbmc.merge.samples <- AddMetaData(object = pbmc.merge.samples,metadata = cluster_letters, col.name = 'Sex' )

# Save pbmc file
pbmc.rna.merge.samples=pbmc.merge.samples
save(pbmc.rna.merge.samples, file = "./pbmc.merge.rna.samples.RData")
#####################################################################################
#library(celldex)
#library(SingleR)
library(dplyr)
library(Seurat)
library(patchwork)
library(gridExtra)
library(ggplot2)
library(SeuratObject)
library(Seurat)
load("./pbmc.RData")
load("./my_pbmc.RData")
#############################################################################
# Calculate NormalizeData
pbmc <- NormalizeData(pbmc.merge.samples, normalization.method = "LogNormalize", scale.factor = 10000)

# Calculate FindVariableFeatures
pbmc.varialble <- FindVariableFeatures(object=pbmc , selection.method = "vst",nfeatures = 3000) # Consider the 2000 genes

# Diet Seurat - keep only data on the seurat object
pbmc.merge.samples<-DietSeurat(pbmc,counts = FALSE,data = TRUE,scale.data = FALSE, assays = "RNA", dimreducs = FALSE,   graphs = FALSE, misc = FALSE)

# Scale data
pbmc<- ScaleData(pbmc.merge.samples,block.size = 1000,do.scale = TRUE,do.center = TRUE,features=VariableFeatures(object = pbmc.varialble))

# Run PCA
pbmc.merge.samples <- RunPCA(pbmc, features = VariableFeatures(object = pbmc.varialble))

# Run Harmony
pbmc <- RunHarmony(pbmc.merge.samples, group.by.vars = c('Sex'),reduction = "pca", assay.use = "RNA", reduction.save = "harmony")

# Run UMAP
pbmc <- RunUMAP(pbmc, dims = 1:50,reduction = "harmony") # Optmize number of dimensions  ElbowPlot =10,15

# Run FindNeighbors
pbmc <- FindNeighbors(pbmc, dims = 1:50,reduction = "harmony") # Optmize number of dimensions  ElbowPlot =10,15

# Run FindClusters # Find clusters for only RNA
pbmc <- FindClusters(pbmc,reduction = "harmony", resolution = 0.4)

# Run find all markers
all.markers <- FindAllMarkers(object = pbmc)

# Select topmqrkers
all.markers <- all.markers %>% group_by(cluster) %>% top_n(n = 10, wt = avg_log2FC) %>% arrange(avg_log2FC) 

# Write csv
write.csv(all.markers, file = paste(output_dir,paste(paste("all.markers","",sep=""),".csv",sep=""),sep=""))

# Write csv
table<-read.csv(file = paste(output_dir,paste(paste("all.markers","",sep=""),".csv",sep=""),sep=""))

# Take only the top 5
table <- table %>% group_by(cluster) %>% top_n(n = 5, wt = avg_log2FC) %>% arrange(avg_log2FC) 
############################################################################
load("./pbmc.RData")
load("./my_pbmc.RData")
############################################################################
# Run FindClusters # Find clusters for only RNA
pbmc.annotation.predefined <- FindClusters(pbmc,reduction = "harmony", resolution = 0.12)
pbmc.2 <- FindClusters(pbmc,reduction = "harmony", resolution = 0.12)

DefaultAssay(pbmc.annotation.predefined) <- "RNA"
clustavg<-AverageExpression(pbmc.annotation.predefined)
clustdf<-as.data.frame(clustavg$RNA)
clustdf<-t(clustdf)
clustdf<-as_tibble(clustdf, rownames = "cluster")
marks<-c("Prr5l","Mog","Mobp","Opalin","Agt","Gfap","Slc1a2","Elavl2","Syt9","Syt1","Snap25",
	 "Slc6a13", "Gfap","Apoe","Aqp4","Pcdh15","Pdgfra","Tnr","Tagln","Cyyr1",
	 "Cldn5","Adgrl4","Arhgap15", "Dock8", "Slc9a9","Srgap2","Cx3cr1","Tnr",
	 "Slc47a1","Acta2","Tagln","Cyyr1","Mrc1","C1qa","Kcnj8","Caprin2","Myh11", 
	 "Atp13a5","Abcc9","Ebf1","Rgs5","Ctss","Gad1", "Gal","Scrg1","Caly","Cst3","Plp1","Cd9","Cst3","C1qb",
	 "Ptprz1","Cspg4")
marks<-c("Prr5l","St18","Syt1","Mog","Snap25","1700016P03Rik","1700047M11Rik","4930447C04Rik","6330403K07Rik","9630013A20Rik","Adam23","Adcyap1","Agrp","Agt","Apod","Apoe","Arhgap36","Arpp21","Atp1a2","Auts2","Avp","B230216N24Rik","Baiap2","Bcas1","C130073E24Rik","C1qa","C1qb","C1qc","C1ql1","C1ql3","Caly","Camkv","Caprin2","Cartpt","Cbln1","Ccdc136","Cck","Ccn3","Cd9","Cdh23","Celf2","Chrm3","Cit","Cited1","Cldn10","Cldn11","Cntnap5a","Col11a1","Col11a2","Col18a1","Col24a1","Col25a1","Coro6","Cpne7","Cpne9","Crhbp","Cryab","Csf1r","Csf2rb2","Cspg4","Cst3","Ctss","Cyp11a1","Dclk1","Ddc","Dgkb","Dlk1","Ebf1","Ecel1","Egr1","Elavl2","En1","Epha10","Esyt3","Fars2","Fign","Fos","Fxyd6","Gabra1","Gad1","Gad2","Gal","Ghrh","Gja1","Gjc3","Gm20515","Gm20751","Gm26771","Gm26871","Gm49359","Gpr17","Gpr37l1","Grip1","Grip2","Grp","Hbb-bs","Hcrt","Hcrtr2","Hdc","Hexb","Hmcn1","Htr2c","Icam5","Igfbp2","Igfbp5","Isl1","Itih3","Itm2a","Junb","Kcnc1","Kcnc2","Kcnk2","Kctd16","Lhx9","Lmnb2","Mag","Magel2","Mal","Matn4","Mbp","Meis2","Mgp","Mia","Mir99ahg","Mobp","Mrpl9","Msrb2","Neat1","Nefm","Nfasc","Nkx2-1","Nme7","Nms","Nnat","Npy","Npy1r","Nrgn","Nrn1","Nrxn3","Ntm","Ntng1","Nts","Ntsr2","Nxph4","Olig1","Otp","Oxt","Parpbp","Pbx1","Pcsk2","Pde10a","Pdgfra","Penk","Pitx2","Pla2g7","Plagl1","Pld4","Plp1","Pmch","Pnoc","Pomc","Pou3f2","Prkcd","Prxl2c","Ptbp3","Ptgds","Pthlh","Ptn","Ptpn3","Ptprn","Ptprz1","Pvalb","Qk","Rasal1","Rasgef1c","Rasgrf2","Rbms1","Resp18","Rinl","Rmst","Rorb","Rprm","Rprml","Rrad","Rreb1","S100a6","Scg2","Scrg1","Selplg","Serpine2","Sfrp2","Sgk1","Sim1","Sirt2","Six3","Slc10a4","Slc18a2","Slc32a1","Slc35d3","Slc6a11","Slc6a3","Sncg","Sparc","Sphkap","Sst","Syt7","Tac1","Tbx3os1","Tcf4","Tcf7l2","Tent5a","Th","Tiam2","Tmcc3","Tmem100","Tmem130","Tnxb","Traip","Trem2","Trf","Trh","Tspan7","Ubash3b","Unc13c","Vgf","Vip","Vipr2","Vstm2l","Vtn","Wfs1","Zbtb20")
#marks<-c("Snap25",table$gene)
marks = data.frame(marks)
colnames(marks)[1] = "Gene"
df2<- clustdf %>% dplyr::select("cluster",marks$Gene) 
df2$orig_cluster<-df2$cluster
df2$ID<-NA

# Neurônios, astrocitos, oligodendrocitos, OPCs e células imune/micróglia
df2<- df2 %>% mutate(ID = ifelse(Snap25 > 1, "Neurons", df2$ID))
df2<- df2 %>% mutate(ID = ifelse(Agt > 2, "Astrocytes", df2$ID))
df2<- df2 %>% mutate(ID = ifelse(Ctss > 1, "Microglia", df2$ID)) # Ok
df2<- df2 %>% mutate(ID = ifelse(Pdgfra > 2, "OPCs", df2$ID))    # Ok
df2<- df2 %>% mutate(ID = ifelse(Mbp > 6 & Mobp > 6, "Oligodendrocytes", df2$ID))

# Table to investigate clusters
#data.frame("Astrocytes"=df2$ID,"Oligodendrocytes"=df2$ID,"Microglia"=df2$ID,"OPCs"=df2$ID,"Neurons"=df2$ID)

# Write csv
#write.csv(data.frame("Astr"=df2_1$ID,"Oligo"=df2_2$ID,"Micro"=df2_3$ID,"OPCs"=df2_4$ID,"Neur"=df2_5$ID), file = paste(output_dir,paste(paste("clusters","",sep=""),".csv",sep=""),sep=""))


y<-dplyr::select(df2,cluster)
Idents(pbmc.annotation.predefined)<-plyr::mapvalues(Idents(pbmc.annotation.predefined), from = df2$cluster, to = df2$ID)
pbmc.annotation.predefined$group<-Idents(pbmc.annotation.predefined)
marker="Neurons : Snap25 > 1 - Astrocytes : Agt > 2 - Microglia : Ctss > 1 - OPCs : Pdgfra > 0.5 - Oligodendrocytes : Mbp > 6 & Mobp > 6"

# Dimplots
DimPlot_AllMarkers<-DimPlot(object = pbmc.2, reduction = 'umap', label = TRUE) + ggtitle ("FindAllMarkers resolution 0.12")
DimPlot_PredefinedMarkers<-DimPlot(pbmc.annotation.predefined, reduction = 'umap', label = F) + ggtitle (paste("Pre-defined markers resolution : ",0.12,sep=""))
	
# Now I will plot the umap always with two colours
# one colour for the syudied cell-type
# other colour for the Remaining of the celltypes
# how to do it : try subsetting or
# or changing labels
# FindClusters_resolution
png(filename=paste(output_dir,"DimPlots.png",sep=""), width = 24, height = 36, res=600, units = "cm")
	grid.arrange(DimPlot_AllMarkers, DimPlot_PredefinedMarkers, nrow = 3)
dev.off()

#############################################################################
To DO sc-RNA:

# Work on the resolutions to fine-tune number of clusters
# optimal number of clusters

# Use canonical markers of paper for each cell types
# Use genes of Victor
# Use genes of mousebrain.org

# Limit of makers

# Deliverables :
# Map with clusters/celltypes/markers
# Description os criterias
#############################################################################
# Run find all markers
all.markers <- FindAllMarkers(object = pbmc.annotation.predefined)

# Select topmqrkers
all.markers.celltypes <- all.markers %>% group_by(cluster) %>% top_n(n = 10, wt = avg_log2FC) %>% arrange(avg_log2FC) 

# Write csv
write.csv(all.markers.celltypes, file = paste(output_dir,paste(paste("all.markers.celltypes","",sep=""),".csv",sep=""),sep=""))

# Set indetity
Idents(object = pbmc.annotation.predefined) <- pbmc.annotation.predefined@meta.data$Sex

# Run find all markers for sex
all.markers.sex <- FindMarkers(pbmc.annotation.predefined, ident.1 = "Male", ident.2 = "Female")

# Write csv
write.csv(all.markers.sex, file = paste(output_dir,paste(paste("all.markers.sex","",sep=""),".csv",sep=""),sep=""))

#############################################################################
To DO sc-ATAC:

# Study Seurat 5.0
# Study integration of sc-ATAC with sc-RNA
# Implementation dataset : Multi-omics data from Seurat V.5.0

# Test integration sample ATAC-M1 and cDNA-M1
# Deliverables : integration sample ATAC-M1 and cDNA-M1

#############################################################################
DimPlot_PredefinedMarkers_Neurons<-DimPlot(subset(pbmc.annotation.predefined, subset = group == "Neurons"), label = F) + ggtitle ("Pre-defined markers for Neurons\n Snap25 > 4 & Gad1 > 2 & Gal >2")
DimPlot_PredefinedMarkers_Astrocytes<-DimPlot(subset(pbmc.annotation.predefined, subset = group == "Astrocytes"), label = F) + ggtitle ("Pre-defined markers for Astrocytes\n Agt > 3")
DimPlot_PredefinedMarkers_Microglia<-DimPlot(subset(pbmc.annotation.predefined, subset = group == "Microglia"), label = F) + ggtitle ("Pre-defined markers for Microglia\n Ctss > 1")
DimPlot_PredefinedMarkers_Oligodentrocytes<-DimPlot(subset(pbmc.annotation.predefined, subset = group == "Oligodendrocytes"), label = F) + ggtitle ("Pre-defined markers for Oligodendrocytes\n Mobp > 1 & Scrg1>1")

# Now I will plot the umap always with two colours
# one colour for the syudied cell-type
# other colour for the Remaining of the celltypes
# how to do it : try subsetting or
# or changing labels
# FindClusters_resolution
png(filename=paste(output_dir,"DimPlots.png",sep=""), width = 48, height = 48, res=600, units = "cm")
	grid.arrange(DimPlot_AllMarkers, DimPlot_PredefinedMarkers,DimPlot_PredefinedMarkers_Neurons,DimPlot_PredefinedMarkers_Astrocytes,DimPlot_PredefinedMarkers_Microglia,DimPlot_PredefinedMarkers_Oligodentrocytes, nrow = 3)
dev.off()
#############################################################################
# pheatmaps
# Plot pheatmap
annot=data.frame(orig_cluster=df_data2[,"orig_cluster"])
rownames(annot)<-df_data2[,"orig_cluster"]
df_data2 = as.data.frame(sapply(data.frame(df2)[data.frame(df2)$cluster %in% c(5,24,29),], as.numeric)) 
rownames(df_data2)<-df_data2[,"orig_cluster"]
png(filename=paste(output_dir,"pheatmap1.png",sep=""), width = 30, height = 12, res=600, units = "cm")
	pheatmap(df_data2[,-which(colnames(df_data2)=="orig_cluster")],scale="column",cluster_rows = TRUE,cluster_cols = TRUE,main="Astrocytes",row_annotation=annot)
dev.off()

# Plot pheatmap
annot=data.frame(orig_cluster=df_data2[,"orig_cluster"])
rownames(annot)<-df_data2[,"orig_cluster"]
df_data2 = as.data.frame(sapply(data.frame(df2)[data.frame(df2)$cluster %in% c(6,7,14,15),], as.numeric)) 
rownames(df_data2)<-df_data2[,"orig_cluster"]
png(filename=paste(output_dir,"pheatmap2.png",sep=""), width = 30, height = 12, res=600, units = "cm")
	pheatmap(df_data2[,-which(colnames(df_data2)=="orig_cluster")],scale="column",cluster_rows = TRUE,cluster_cols = TRUE,main="Oligodentrocytes",row_annotation=annot)
dev.off()

# Plot pheatmap
annot=data.frame(orig_cluster=df_data2[,"orig_cluster"])
rownames(annot)<-df_data2[,"orig_cluster"]
df_data2 = as.data.frame(sapply(data.frame(df2)[data.frame(df2)$cluster %in% c(20,0),], as.numeric)) 
rownames(df_data2)<-df_data2[,"orig_cluster"]
png(filename=paste(output_dir,"pheatmap3.png",sep=""), width = 36, height = 12, res=600, units = "cm")
	pheatmap(df_data2[,-which(colnames(df_data2)=="orig_cluster")],scale="column",cluster_rows = TRUE,cluster_cols = TRUE,main="Microglia",row_annotation=annot)
dev.off()

# Plot pheatmap
annot=data.frame(orig_cluster=df_data2[,"orig_cluster"])
rownames(annot)<-df_data2[,"orig_cluster"]
df_data2 = as.data.frame(sapply(data.frame(df2)[data.frame(df2)$cluster %in% c(11,14),], as.numeric)) 
rownames(df_data2)<-df_data2[,"orig_cluster"]
png(filename=paste(output_dir,"pheatmap4.png",sep=""), width = 36, height = 12, res=600, units = "cm")
	pheatmap(df_data2[,-which(colnames(df_data2)=="orig_cluster")],scale="column",cluster_rows = TRUE,cluster_cols = TRUE,main="OCPs",row_annotation=annot)
dev.off()

# Plot pheatmap
annot=data.frame(orig_cluster=df_data2[,"orig_cluster"])
rownames(annot)<-df_data2[,"orig_cluster"]
df_data2 = as.data.frame(sapply(data.frame(df2)[data.frame(df2)$cluster %in% c(0,1,2,3,4,8,9,10,67,5,24,29),], as.numeric)) 
rownames(df_data2)<-df_data2[,"orig_cluster"]
png(filename=paste(output_dir,"pheatmap5.png",sep=""), width = 36, height = 24, res=600, units = "cm")
	pheatmap(df_data2[,-which(colnames(df_data2)=="orig_cluster")],scale="column",cluster_rows = TRUE,cluster_cols = TRUE,main="Neurons",row_annotation=annot)
dev.off()
#############################################################################
VlnPlot1<-VlnPlot(pbmc.annotation.predefined,features = "Snap25", pt.size = 0) + NoLegend()
VlnPlot2<-VlnPlot(pbmc.annotation.predefined,features = c("Arhgap15", "Dock8"), pt.size = 0) + NoLegend() + ggtitle ("Immune Cells")
VlnPlot3<-VlnPlot(pbmc.annotation.predefined,features = c("Mog", "Mobp"), pt.size = 0) + NoLegend()
VlnPlot4<-VlnPlot(pbmc.annotation.predefined,features = c("Agt"), pt.size = 0) + NoLegend() 
VlnPlot5<-VlnPlot(pbmc.annotation.predefined,features = c("Tnr","Pdgfra"), pt.size = 0) + NoLegend() 

# FindClusters_resolution
png(filename=paste(output_dir,"VlnPlot_Markers.png",sep=""), width = 18, height = 36, res=600, units = "cm")
	grid.arrange(VlnPlot1, VlnPlot2,VlnPlot3,VlnPlot4,VlnPlot5, nrow = 5)
dev.off()


myplotsA[[index]]<-DimPlot(pbmc.annotation.predefined, label = F) + ggtitle ("Pre-defined markers \n Snap25/Arhgap15-Dock8/Mog-Mobp/Agt/Tnr-Pdgfra")
myplotsB[[index]]<-VlnPlot(pbmc.annotation.predefined, features = "Agt", pt.size = 0) + NoLegend() + ggtitle ("Pre-defined markers \n Snap25/Arhgap15-Dock8/Mog-Mobp/Agt/Tnr-Pdgfra")





#############################################################################
# Create inside a loop
resolutions=c(0.01,0.02,0.03,0.04,0.05,0.1,0.2,0.3,0.4,0.5,0.6,1.0)

# List of plots
myplotsA<-list()
myplotsB<-list()

# For each value in the reslution vector
for (index in 1:length(resolutions)) 
{	
	# Copy file to annotate with pre-defined parameters 
	pbmc.annotation.predefined<-pbmc

	# Run FindClusters # Find clusters for only RNA
	pbmc.annotation.predefined <- FindClusters(pbmc.annotation.predefined,reduction = "harmony", resolution = resolutions[index])
	
	DefaultAssay(pbmc.annotation.predefined) <- "RNA"
	clustavg<-AverageExpression(pbmc.annotation.predefined)
	clustdf<-as.data.frame(clustavg$RNA)
	clustdf<-t(clustdf)
	clustdf<-as_tibble(clustdf, rownames = "cluster")
	marks<-c("Mog","Mobp","Opalin","Agt","Gfap","Slc1a2","Elavl2","Syt9","Syt1","Snap25",
		 "Slc6a13", "Gfap","Apoe","Aqp4","Pcdh15","Pdgfra","Tnr","Tagln","Cyyr1",
		 "Cldn5","Adgrl4","Arhgap15", "Dock8", "Slc9a9","Srgap2","Cx3cr1","Tnr",
		 "Slc47a1","Acta2","Tagln","Cyyr1","Mrc1","C1qa","Kcnj8","Caprin2","Myh11", 
		 "Atp13a5","Abcc9","Ebf1","Rgs5","Ctss","Gad1", "Gal","Scrg1","Caly","Cst3","Plp1","Cd9","Cst3","C1qb",
		 "Ptprz1","Cspg4")
	marks<-c("Snhg11","Arhgap15","Dock8","Prr5l","St18","Ctss","Agt","Snap25","St18","Syt1","Mog","Snap25","1700016P03Rik","1700047M11Rik","4930447C04Rik","6330403K07Rik","9630013A20Rik","Adam23","Adcyap1","Agrp","Agt","Apod","Apoe","Arhgap36","Arpp21","Atp1a2","Auts2","Avp","B230216N24Rik","Baiap2","Bcas1","C130073E24Rik","C1qa","C1qb","C1qc","C1ql1","C1ql3","Caly","Camkv","Caprin2","Cartpt","Cbln1","Ccdc136","Cck","Ccn3","Cd9","Cdh23","Celf2","Chrm3","Cit","Cited1","Cldn10","Cldn11","Cntnap5a","Col11a1","Col11a2","Col18a1","Col24a1","Col25a1","Coro6","Cpne7","Cpne9","Crhbp","Cryab","Csf1r","Csf2rb2","Cspg4","Cst3","Ctss","Cyp11a1","Dclk1","Ddc","Dgkb","Dlk1","Ebf1","Ecel1","Egr1","Elavl2","En1","Epha10","Esyt3","Fars2","Fign","Fos","Fxyd6","Gabra1","Gad1","Gad2","Gal","Ghrh","Gja1","Gjc3","Gm20515","Gm20751","Gm26771","Gm26871","Gm49359","Gpr17","Gpr37l1","Grip1","Grip2","Grp","Hbb-bs","Hcrt","Hcrtr2","Hdc","Hexb","Hmcn1","Htr2c","Icam5","Igfbp2","Igfbp5","Isl1","Itih3","Itm2a","Junb","Kcnc1","Kcnc2","Kcnk2","Kctd16","Lhx9","Lmnb2","Mag","Magel2","Mal","Matn4","Mbp","Meis2","Mgp","Mia","Mir99ahg","Mobp","Mrpl9","Msrb2","Neat1","Nefm","Nfasc","Nkx2-1","Nme7","Nms","Nnat","Npy","Npy1r","Nrgn","Nrn1","Nrxn3","Ntm","Ntng1","Nts","Ntsr2","Nxph4","Olig1","Otp","Oxt","Parpbp","Pbx1","Pcsk2","Pde10a","Pdgfra","Penk","Pitx2","Pla2g7","Plagl1","Pld4","Plp1","Pmch","Pnoc","Pomc","Pou3f2","Prkcd","Prxl2c","Ptbp3","Ptgds","Pthlh","Ptn","Ptpn3","Ptprn","Ptprz1","Pvalb","Qk","Rasal1","Rasgef1c","Rasgrf2","Rbms1","Resp18","Rinl","Rmst","Rorb","Rprm","Rprml","Rrad","Rreb1","S100a6","Scg2","Scrg1","Selplg","Serpine2","Sfrp2","Sgk1","Sim1","Sirt2","Six3","Slc10a4","Slc18a2","Slc32a1","Slc35d3","Slc6a11","Slc6a3","Sncg","Sparc","Sphkap","Sst","Syt7","Tac1","Tbx3os1","Tcf4","Tcf7l2","Tent5a","Th","Tiam2","Tmcc3","Tmem100","Tmem130","Tnxb","Traip","Trem2","Trf","Trh","Tspan7","Ubash3b","Unc13c","Vgf","Vip","Vipr2","Vstm2l","Vtn","Wfs1","Zbtb20")
	#marks<-c("Snap25",table$gene)
	marks = data.frame(marks)
	colnames(marks)[1] = "Gene"
	df2<- clustdf %>% dplyr::select("cluster",marks$Gene) 
	df2$orig_cluster<-df2$cluster
	df2$ID<-NA
	
	# Working
	#df2<- df2 %>% mutate(ID = ifelse(Snap25 > 3, "Neurons", df2$ID))
	#df2<- df2 %>% mutate(ID = ifelse(Agt > 3, "Astrocytes", df2$ID))
	#df2<- df2 %>% mutate(ID = ifelse(Ctss > 2, "Microglia", df2$ID)) # Ok
	#df2<- df2 %>% mutate(ID = ifelse(Pdgfra > 2, "OPCs", df2$ID))    # Ok
	#df2<- df2 %>% mutate(ID = ifelse(Mbp >2 & Mobp >2, "Oligodendrocytes", df2$ID))
	
	df2<- df2 %>% mutate(ID = ifelse(Snhg11 > 2, "Neurons", df2$ID))
	df2<- df2 %>% mutate(ID = ifelse(Apoe > 2, "Astrocytes", df2$ID))
	df2<- df2 %>% mutate(ID = ifelse(C1qc > 2, "Microglia", df2$ID)) # Ok
	df2<- df2 %>% mutate(ID = ifelse(Pmch > 2, "OPCs", df2$ID))    # Ok
	df2<- df2 %>% mutate(ID = ifelse(Plp1 >2, "Oligodendrocytes", df2$ID))

	y<-dplyr::select(df2,cluster)
	Idents(pbmc.annotation.predefined)<-plyr::mapvalues(Idents(pbmc.annotation.predefined), from = df2$cluster, to = df2$ID)
	pbmc.annotation.predefined$group<-Idents(pbmc.annotation.predefined)
	
	# Dimplots
	marker="Neurons : Snhg11 > 2, Microglia : C1qc > 2, Astrocytes : Apoe > 2, Oligodendrocytes : Plp1 > 2, OPCs : Pmch > 2"
	DimPlot_PredefinedMarkers<-DimPlot(pbmc.annotation.predefined, reduction = 'umap', label = F) + ggtitle (paste("Resolution",resolutions[index],sep=""))
	myplotsA[[index]]<-DimPlot_PredefinedMarkers
} 

# FindClusters_resolution
png(filename=paste(output_dir,"FindClusters_resolutions8.png",sep=""), width = 48, height = 48, res=1600, units = "cm")
	grid.arrange(myplotsA[[1]],myplotsA[[2]],myplotsA[[3]],myplotsA[[4]],myplotsA[[5]],myplotsA[[6]],myplotsA[[7]],myplotsA[[8]],myplotsA[[9]],myplotsA[[10]],myplotsA[[11]],myplotsA[[12]], nrow = 3, top = marker)
dev.off()
#############################################################################
# Calculare feature plot per celltype
marker=c("Agt","Apoe","Arhgap15","Atp1a2","C1qa", "C1qb","C1qb","C1qc","Caly", "CD45","Cd9","Cst3","Ctss","Ctss","Dock8","Gad1","Gja1","Mbp","Mob","Olig1","Pdgfra","Pld4","Prr5l","Ptgds","Rinl","Rorb","Scg2","Snap25","Sparc","St18","Tnr","Trem2")
# FindClusters_resolution
png(filename=paste(output_dir,"FeaturePlotsAll.png",sep=""), width = 36, height = 36, res=600, units = "cm")
	FeaturePlot(pbmc, features = marker)
dev.off()

# Calculare feature plot per celltype
marker=c("Caprin2","Snap25","Agt","Ctss","Pdgfra","Mbp","Mobp")
# FindClusters_resolution
png(filename=paste(output_dir,"FeaturePlotsAll.png",sep=""), width = 36, height = 36, res=600, units = "cm")
	FeaturePlot(pbmc, features = marker)
dev.off()

#############################################################################
# Find cluster markers
# p-values
# Top values
# Sorted by change
# Save pbmc file
save(pbmc, file = "./my_pbmc.RData")
#############################################################################
# Calculare feature plot per celltype
marker=c("Cldn10","Cst3","Slc6a11","Sparc","Gja1","Agt","Ntsr2","Atp1a2","Itih3","Apoe","Cldn10","Gja1","Pla2g7","Ptgds","Slc6a11","Ntsr2","Agt","Itih3","Atp1a2","Apoe","Serpine2","Cd9","Gpr37l1","Gja1","C1ql1","Atp1a2","Scrg1","Apoe","Cspg4","Pdgfra")
# FindClusters_resolution
png(filename=paste(output_dir,"FeaturePlotsAstrocytes.png",sep=""), width = 36, height = 36, res=600, units = "cm")
	FeaturePlot(pbmc, features = marker)
dev.off()
#############################################################################
# Calculare feature plot per celltype
marker=c("Mag","Cryab","Sgk1","Cldn11","Mal","Neat1","Apod","Trf","Plp1","Ptgds","Mobp","Mag","Mbp","Apod","Ptgds","1700047M11Rik","Trf","Cldn11","Mal","Plp1","Gjc3","Qk","Mbp","Sirt2","Nfasc","Rinl","9630013A20Rik","Bcas1","Gpr17","Cd9")
# FindClusters_resolution
png(filename=paste(output_dir,"FeaturePlotsOligodentrocytes.png",sep=""), width = 36, height = 36, res=600, units = "cm")
	FeaturePlot(pbmc, features = marker)
dev.off()
######################################
# Calculare feature plot per celltype
marker=c("Trem2","Selplg","Cst3","Csf1r","Pld4","Hexb","Ctss","C1qb","C1qa", "C1qc")
# FindClusters_resolution
png(filename=paste(output_dir,"FeaturePlotsMicroglia.png",sep=""), width = 24, height = 24, res=600, units = "cm")
	FeaturePlot(pbmc, features = marker)
dev.off()
######################################
# Calculare feature plot per celltype
marker=c("Matn4","Ptprz1","Tmem100","Olig1","Ptn","Cd9","C1ql1","Scrg1","Cspg4","Pdgfra")
# FindClusters_resolution
png(filename=paste(output_dir,"FeaturePlotsOPCs.png",sep=""), width = 36, height = 36, res=600, units = "cm")
	FeaturePlot(pbmc, features = marker)
dev.off()

######################################
# Calculare feature plot per celltype
marker=c("Syt1","Snap25")
# FindClusters_resolution
png(filename=paste(output_dir,"FeaturePlotsNeurons.png",sep=""), width = 16, height = 16, res=600, units = "cm")
	FeaturePlot(pbmc, features = marker)
dev.off()


# Calculare feature plot per celltype
marker=c("Mag","Cryab","Sgk1","Cldn11","Mal","Neat1","Apod","Trf","Plp1","Ptgds","Gjc3","Qk","Mbp","Sirt2","Nfasc","Rinl","9630013A20Rik","Bcas1","Mobp","Mag","Mbp","Gpr17","Apod","Cd9","Ptgds","1700047M11Rik","Trf","Cldn11","Mal","Plp1")
# FindClusters_resolution
png(filename=paste(output_dir,"FeaturePlotsOligodentrocitos.png",sep=""), width = 32, height = 32, res=600, units = "cm")
	FeaturePlot(pbmc, features = marker)
dev.off()

# Calculare feature plot per celltype
marker=c("Matn4","Ptprz1","Tmem100","Olig1","Ptn","Cd9","C1ql1","Scrg1","Cspg4","Pdgfra")
# FindClusters_resolution
png(filename=paste(output_dir,"FeaturePlotsOPCS.png",sep=""), width = 24, height = 24, res=600, units = "cm")
	FeaturePlot(pbmc, features = marker)
dev.off()

marker=c("Trem2","Selplg","Cst3","Csf1r","Pld4","Hexb","Ctss","C1qb","C1qa","C1qc")
# FindClusters_resolution
png(filename=paste(output_dir,"FeaturePlotsMicroglia.png",sep=""), width = 24, height = 24, res=600, units = "cm")
	FeaturePlot(pbmc, features = marker)
dev.off()
marker=c("Snap25","Agt","Ctss","Prr5l","St18")
# FindClusters_resolution
png(filename=paste(output_dir,"FeaturePlotsAll.png",sep=""), width = 36, height = 36, res=600, units = "cm")
	FeaturePlot(pbmc, features = marker)
dev.off()
