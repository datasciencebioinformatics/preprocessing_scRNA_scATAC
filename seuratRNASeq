s#####################################################################################
library(dplyr)
library(Seurat)
library(patchwork)
#####################################################################################
# Set intput dir
input_dir="/home/felipe/Camundongos/"

# Set output dir
output_dir="/home/felipe/Camundongos/results/"
#####################################################################################
# First, load the tables 
# Load table for each sample - cDNAM1
cDNAM1<-Read10X(data.dir=paste(input_dir,"snRNASeq_output/cDNA-M1/outs/filtered_feature_bc_matrix/",sep=""), gene.column = 2, cell.column = 1, unique.features = TRUE, strip.suffix = FALSE)
cDNAM1 <- CreateSeuratObject(counts = cDNAM1, project = "hypotha")

# Load table for each sample - cDNAM2
cDNAM2<-Read10X( data.dir=paste(input_dir,"snRNASeq_output/cDNA-M2/outs/filtered_feature_bc_matrix/",sep=""), gene.column = 2, cell.column = 1, unique.features = TRUE, strip.suffix = FALSE)
cDNAM2 <- CreateSeuratObject(counts = cDNAM2, project = "hypotha")

# Load table for each sample - cDNAM3
cDNAM3<-Read10X( data.dir=paste(input_dir,"snRNASeq_output/cDNA-M3/outs/filtered_feature_bc_matrix/",sep=""), gene.column = 2, cell.column = 1, unique.features = TRUE, strip.suffix = FALSE)
cDNAM3 <- CreateSeuratObject(counts = cDNAM3, project = "hypotha")

# Load table for each sample - cDNAM4
cDNAM4<-Read10X( data.dir=paste(input_dir,"snRNASeq_output/cDNA-M4/outs/filtered_feature_bc_matrix/",sep=""), gene.column = 2, cell.column = 1, unique.features = TRUE, strip.suffix = FALSE)
cDNAM4 <- CreateSeuratObject(counts = cDNAM4, project = "hypotha")

# Load table for each sample - cDNAM5
cDNAM5<-Read10X( data.dir=paste(input_dir,"snRNASeq_output/cDNA-M5/outs/filtered_feature_bc_matrix/",sep=""), gene.column = 2, cell.column = 1, unique.features = TRUE, strip.suffix = FALSE)
cDNAM5 <- CreateSeuratObject(counts = cDNAM5, project = "hypotha")

# Load table for each sample - cDNAM6
cDNAM6<-Read10X( data.dir=paste(input_dir,"snRNASeq_output/cDNA-M6/outs/filtered_feature_bc_matrix/",sep=""), gene.column = 2, cell.column = 1, unique.features = TRUE, strip.suffix = FALSE)
cDNAM6 <- CreateSeuratObject(counts = cDNAM6, project = "hypotha")

#####################################################################################
# Load table for each sample - cDNAM1
# pbmc.hypothalamus
pbmc.hypothalamus <- merge(cDNAM1, y = cDNAM2, add.cell.ids = c("cDNAM1", "cDNAM2"), project = "hypotha")

# pbmc.hypothalamus
pbmc.hypothalamus <- merge(pbmc.hypothalamus, y = cDNAM3, add.cell.ids = c("pbmc.hypothalamus", "cDNAM3"), project = "hypotha")

# pbmc.hypothalamus
pbmc.hypothalamus <- merge(pbmc.hypothalamus, y = cDNAM4, add.cell.ids = c("pbmc.hypothalamus", "cDNAM4"), project = "hypotha")

# pbmc.hypothalamus
pbmc.hypothalamus <- merge(pbmc.hypothalamus, y = cDNAM5, add.cell.ids = c("pbmc.hypothalamus", "cDNAM5"), project = "hypotha")

# pbmc.hypothalamus
pbmc.hypothalamus <- merge(pbmc.hypothalamus, y = cDNAM6, add.cell.ids = c("pbmc.hypothalamus", "cDNAM6"), project = "hypotha")
#####################################################################################
# Second create quality plots
# The [[ operator can add columns to object metadata. This is a great place to stash QC stats
PercentageFeatureSet<-pbmc.hypothalamus[["percent.mt"]] <- PercentageFeatureSet(pbmc.hypothalamus, pattern = "^MT-")

#####################################################################################
# Visualize QC metrics as a violin plot
VlnPlotA<-VlnPlot(pbmc.hypothalamus, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), cols="gray0", pt.size = 0, ncol = 3)
VlnPlotB<-VlnPlot(pbmc.hypothalamus, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), cols="white", pt.size = 0.0001, ncol = 3)

# Save VlnPlot
png(filename=paste(output_dir,"hypotha_VlnPlot_featuresA.png",sep=""), width = 24, height = 10, res=800, units = "cm")
plot(VlnPlotA)
dev.off()

# Save VlnPlot
png(filename=paste(output_dir,"hypotha_VlnPlot_featuresB.png",sep=""), width = 24, height = 10, res=800, units = "cm")
plot(VlnPlotB)
dev.off()
#####################################################################################
# FeatureScatter is typically used to visualize feature-feature relationships, but can be used
# for anything calculated by the object, i.e. columns in object metadata, PC scores etc.
plot1 <- FeatureScatter(pbmc.hypothalamus, feature1 = "nCount_RNA", feature2 = "percent.mt", cols="gray0")
plot2 <- FeatureScatter(pbmc.hypothalamus, feature1 = "nCount_RNA", feature2 = "nFeature_RNA", cols="gray0")
plot<-plot1 + plot2

# Save FeatureScatter
png(filename=paste(output_dir,"hypotha_FeatureScatter.png",sep=""), width = 24, height = 10, res=600, units = "cm")
plot(plot)
dev.off()
#####################################################################################
# Normalize the data
pbmc.norm <- NormalizeData(pbmc.hypothalamus, normalization.method = "LogNormalize", scale.factor = 10000)

#####################################################################################
## Identification of highly variable features (feature selection)
pbmc.hypothalamus <- FindVariableFeatures(pbmc.hypothalamus, selection.method = "vst", nfeatures = 2000)

# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(pbmc.hypothalamus), 10)

# plot variable features with and without labels
plot1 <- VariableFeaturePlot(pbmc.hypothalamus)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot<- plot1 + plot2

# Save FeatureScatter
#filename="/home/felipe/Downloads/snRNASeq_out/out/"
png(filename=paste(output_dir,"hypotha_FindVariableFeatures.png",sep=""), width = 24, height = 10, res=600, units = "cm")
plot(plot)
dev.off()
#####################################################################################
# Scaling the data
all.genes <- rownames(pbmc.hypothalamus)
all.genes <- head(VariableFeatures(pbmc.hypothalamus), 250)
pbmc.hypothalamus <- ScaleData(pbmc.hypothalamus, features = all.genes)
#####################################################################################
# Perform linear dimensional reduction
pbmc.hypothalamus <- RunPCA(pbmc.hypothalamus, features = VariableFeatures(object = pbmc.hypothalamus))

#####################################################################################
# Perform linear dimensional reduction
pbmc.hypothalamus <- RunPCA(pbmc, features = VariableFeatures(object = pbmc.hypothalamus))

# Examine and visualize PCA results a few different ways
print(pbmc.hypothalamus[["pca"]], dims = 1:5, nfeatures = 5)

# Create plots
plot<-VizDimLoadings(pbmc.hypothalamus, dims = 1:2, reduction = "pca")

# Save FeatureScatter
png(filename=paste(output_dir,"hypotha_FindVariableFeatures.png",sep=""), width = 24, height = 10, res=600, units = "cm")
plot(plot)
dev.off()


