#####################################################################################
library(dplyr)
library(Seurat)
library(patchwork)
#####################################################################################
# Set intput dir
input_dir="/home/felipe/snRNASeq_output/cDNA-M1/outs/filtered_feature_bc_matrix/"

# Set output dir
output_dir="/home/felipe/snRNASeq_output/results/"
#####################################################################################
# First, load the tables 
# Load table for all sample - aggreagate cellranger for the six samples
Read10X<-Read10X(data.dir=input_dir, gene.column = 2, cell.column = 1, unique.features = TRUE, strip.suffix = FALSE)

# Load table for all sample - aggreagate cellranger for the six samples
cDNAM1.pbmc <- CreateSeuratObject(counts = Read10X, project = "hypotha")

# Scale the data
cDNAM1.pbmc <- ScaleData(cDNAM1.pbmc)
#####################################################################################
# Second create quality plots
# The [[ operator can add columns to object metadata. This is a great place to stash QC stats
cDNAM1.pbmc[["percent.mt"]] <- PercentageFeatureSet(cDNAM1.pbmc, pattern = "^MT-")

#####################################################################################
# Visualize QC metrics as a violin plot
VlnPlotA<-VlnPlot(cDNAM1.pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), cols="gray0", pt.size = 0, ncol = 3)
VlnPlotB<-VlnPlot(cDNAM1.pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), cols="white", pt.size = 0.0001, ncol = 3)

# Save VlnPlot
png(filename=paste(output_dir,"hypotha_VlnPlot_featuresA.png",sep=""), width = 24, height = 10, res=800, units = "cm")
plot(VlnPlotA)
dev.off()

![](https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhBgKhGgBUhVs9lUASPKc7Y7FocSmb9Pc2wU5n7Cn4Gfu9bxC5w-DVGpvFpzPYSVVHpnqpSm5AYAgY_d1MX45jGJxbMp5c2dAUbAdyj7xfTPBI0Lp0Dr-5ce-mnrXqaseWkd3ISv7JavAtfzqBvKmP3Z3bYgPGBUbsGXI0wna_cqXsPN-64lvZJPRkh/s2400/plot_number_of_cases_per_period.png)

# Save VlnPlot
png(filename=paste(output_dir,"hypotha_VlnPlot_featuresB.png",sep=""), width = 24, height = 10, res=800, units = "cm")
plot(VlnPlotB)
dev.off()

![](https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhBgKhGgBUhVs9lUASPKc7Y7FocSmb9Pc2wU5n7Cn4Gfu9bxC5w-DVGpvFpzPYSVVHpnqpSm5AYAgY_d1MX45jGJxbMp5c2dAUbAdyj7xfTPBI0Lp0Dr-5ce-mnrXqaseWkd3ISv7JavAtfzqBvKmP3Z3bYgPGBUbsGXI0wna_cqXsPN-64lvZJPRkh/s2400/plot_number_of_cases_per_period.png)
#####################################################################################
# FeatureScatter is typically used to visualize feature-feature relationships, but can be used
# for anything calculated by the object, i.e. columns in object metadata, PC scores etc.
plot1 <- FeatureScatter(cDNAM1.pbmc, feature1 = "nCount_RNA", feature2 = "percent.mt", cols="gray0")
plot2 <- FeatureScatter(cDNAM1.pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA", cols="gray0")
FeatureScatter<-plot1 + plot2

# Save FeatureScatter
png(filename=paste(output_dir,"hypotha_FeatureScatter2.png",sep=""), width = 24, height = 10, res=600, units = "cm")
plot(FeatureScatter)
dev.off()

![](https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhBgKhGgBUhVs9lUASPKc7Y7FocSmb9Pc2wU5n7Cn4Gfu9bxC5w-DVGpvFpzPYSVVHpnqpSm5AYAgY_d1MX45jGJxbMp5c2dAUbAdyj7xfTPBI0Lp0Dr-5ce-mnrXqaseWkd3ISv7JavAtfzqBvKmP3Z3bYgPGBUbsGXI0wna_cqXsPN-64lvZJPRkh/s2400/plot_number_of_cases_per_period.png)

#####################################################################################
## Identification of highly variable features (feature selection)
object_scale_data<-LayerData(object = cDNAM1.pbmc, layer="scale.data")

## Cerate object
object_scale_data<-GetAssayData(object = cDNAM1.pbmc[["RNA"]], slot = "scale.data")

## pbmc
## I have tried to use FindVariableFeatures
## but only applied to object_scale_data not to cDNAM1.pbmc
cDNAM1.varialble <- FindVariableFeatures(object=object_scale_data , selection.method = "vst", nfeatures = 2000)


CreateSeuratObject(counts = as(as.matrix(object_scale_data), "sparseMatrix"))

## pbmc
library("Matrix")
cDNAM1.pbmc <- CreateSeuratObject(counts = as(as.matrix(cDNAM1.varialble), "sparseMatrix"))

VariableFeatures(cDNAM1.varialble,assay = "RNA")
HVFInfo(cDNAM1.varialble,assay = "RNA")

# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(cDNAM1.pbmc), 10)

# plot variable features with and without labels
plot1 <- VariableFeaturePlot(FindVariableFeatures.hypothalamus)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot<- plot1 + plot2

# Save FeatureScatter
#filename="/home/felipe/Downloads/snRNASeq_out/out/"
png(filename=paste(output_dir,"hypotha_FindVariableFeatures.png",sep=""), width = 24, height = 10, res=600, units = "cm")
plot(plot)
dev.off()

#####################################################################################
# Perform linear dimensional reduction
pbmc <- RunPCA(pbmc, features = VariableFeatures(object = pbmc))

#####################################################################################
# Perform linear dimensional reduction
pbmc.hypothalamus <- RunPCA(pbmc, features = VariableFeatures(object = pbmc.hypothalamus))

# Examine and visualize PCA results a few different ways
print(pbmc.hypothalamus[["pca"]], dims = 1:5, nfeatures = 5)

# Create plots
plot<-VizDimLoadings(pbmc.hypothalamus, dims = 1:2, reduction = "pca")

# Save FeatureScatter
png(filename=paste(output_dir,"hypotha_FindVariableFeatures.png",sep=""), width = 24, height = 10, res=600, units = "cm")
plot(plot)
dev.off()
