#! /usr/bin/env RScript
#####################################################################################
library(dplyr)
library(Seurat)
library(patchwork)
library(gridExtra)
library(ggplot2)
library(plyr)
library(SeuratObject)
library(Seurat)
library("harmony")
library(Seurat)
library(SeuratData)
library(Azimuth)
library(ggplot2)
library(patchwork)
options(future.globals.maxSize = 1e9)
options(Seurat.object.assay.version = "v5")
library(EnsDb.Mmusculus.v79)
library("Signac")

#####################################################################################
output_dir="./"
#####################################################################################
# Save pbmc file
#load("./pbmc.atac.merge.samples.RData")
#load("./pbmc.atac.merge.samples.RData")
#load("./pbmc.rna.merge.samples.RData")

#load("./ATAC_M1_pbmc.combined.RData")
#load("./cDNA_M1.pbmc.combined.RData")

#####################################################################################
pbmc.rna.merge.samples=cDNA_M1.pbmc.combined
pbmc.atac.merge.samples=ATAC_M1_pbmc.combined
#####################################################################################
# The two tables are being loaded. Interesting to do is the cross-sensitivity plot 
# between ATAC and RNA seq. See link below
# https://kb.10xgenomics.com/hc/en-us/articles/4412331593229-What-would-I-observe-if-I-mismatched-Multiome-ATAC-and-GEX-data-from-different-samples-
#####################################################################################
#n.cells <- length(Cells(pbmc.rna.merge.samples))

# Define number of cells for the first object (subset 1)
# 'ceiling' is used to get integer values if n.cells is odd  
#n.cells.subset.1 <- ceiling(length(Cells(pbmc.rna.merge.samples))*0.25)
#n.cells.subset.2 <- ceiling(length(Cells(pbmc.atac.merge.samples))*0.25)

# Set a seed for reproducible subsampling of cells
#set.seed(seed = 1)

# Sample randomly half (or half + 1 if n.cells is odd) of the cells 
# for the first object (subset 1)
#cells.subset.1 <- base::sample(x = Cells(pbmc.rna.merge.samples), size = n.cells.subset.1, replace = F)
#cells.subset.2 <- base::sample(x = Cells(pbmc.atac.merge.samples), size = n.cells.subset.2, replace = F)

# Create 2 subsetted objects, each formed by the corresponding cells
# Set 'do.clean = T' if you want to keep only the 'data' and 'raw.data' slots
#pbmc.rna.merge.samples <- subset(pbmc.rna.merge.samples, cells = cells.subset.1)
#pbmc.atac.merge.samples <- subset(pbmc.atac.merge.samples, cells = cells.subset.2)
#####################################################################################
# Calculate NormalizeData
pbmc.rna.merge.samples <- NormalizeData(pbmc.rna.merge.samples, normalization.method = "LogNormalize", scale.factor = 10000)
# Calculate FindVariableFeatures
pbmc.varialble.rna <- FindVariableFeatures(object=pbmc.rna.merge.samples , selection.method = "vst",nfeatures = 3000) # Consider the 2000 genes
# Diet Seurat - keep only data on the seurat object
#pbmc.rna.merge.samples<-DietSeurat(pbmc.rna.merge.samples,counts = FALSE,data = TRUE,scale.data = FALSE, assays = "RNA", dimreducs = FALSE,   graphs = FALSE, misc = FALSE)
# Scale data
pbmc.rna.merge.samples<- ScaleData(pbmc.rna.merge.samples,block.size = 1000,do.scale = TRUE,do.center = TRUE,features=VariableFeatures(object = pbmc.varialble.rna))
# Run PCA
pbmc.rna.merge.samples <- RunPCA(pbmc.rna.merge.samples, features = VariableFeatures(object = pbmc.varialble.rna))
# Run Harmony
#pbmc.rna.merge.samples <- RunHarmony(pbmc.rna.merge.samples, group.by.vars = c('Sex'),reduction = "pca", assay.use = "RNA", reduction.save = "harmony")
# Run UMAP
#pbmc.rna.merge.samples <- RunUMAP(pbmc.rna.merge.samples, dims = 1:50,reduction = "harmony") # Optmize number of dimensions  ElbowPlot =10,15
pbmc.rna.merge.samples <- RunUMAP(pbmc.rna.merge.samples, dims = 1:50,reduction = "pca") # Optmize number of dimensions  ElbowPlot =10,15
# Run FindNeighbors
#pbmc.rna.merge.samples <- FindNeighbors(pbmc.rna.merge.samples, dims = 1:50,reduction = "harmony") # Optmize number of dimensions  ElbowPlot =10,15
pbmc.rna.merge.samples <- FindNeighbors(pbmc.rna.merge.samples, dims = 1:50) # Optmize number of dimensions  ElbowPlot =10,15
#####################################################################################
# Step 1 : Output pbmc.rna.merge.samples
# Data is being normalized and 3000 variable genes are further considered. Data is then scaled to be used in PCA, UMAP and FindNeighbors.
# Important to note now, there is only one sample therefore batch correction is commented out.
#####################################################################################
# Run FindNeighbors
# Run FindClusters # Find clusters for only RNA
pbmc.rna.merge.samples <- FindClusters(pbmc.rna.merge.samples,reduction = "pca",resolution = 0.12)

DefaultAssay(pbmc.rna.merge.samples) <- "RNA"
clustavg<-AverageExpression(pbmc.rna.merge.samples)
clustdf<-as.data.frame(clustavg$RNA)
clustdf<-t(clustdf)
clustdf<-as_tibble(clustdf, rownames = "cluster")
marks<-c("Prr5l","St18","Syt1","Mog","Snap25","1700016P03Rik","1700047M11Rik","4930447C04Rik","6330403K07Rik","9630013A20Rik","Adam23","Adcyap1","Agrp","Agt","Apod","Apoe","Arhgap36","Arpp21","Atp1a2","Auts2","Avp","B230216N24Rik","Baiap2","Bcas1","C130073E24Rik","C1qa","C1qb","C1qc","C1ql1","C1ql3","Caly","Camkv","Caprin2","Cartpt","Cbln1","Ccdc136","Cck","Ccn3","Cd9","Cdh23","Celf2","Chrm3","Cit","Cited1","Cldn10","Cldn11","Cntnap5a","Col11a1","Col11a2","Col18a1","Col24a1","Col25a1","Coro6","Cpne7","Cpne9","Crhbp","Cryab","Csf1r","Csf2rb2","Cspg4","Cst3","Ctss","Cyp11a1","Dclk1","Ddc","Dgkb","Dlk1","Ebf1","Ecel1","Egr1","Elavl2","En1","Epha10","Esyt3","Fars2","Fign","Fos","Fxyd6","Gabra1","Gad1","Gad2","Gal","Ghrh","Gja1","Gjc3","Gm20515","Gm20751","Gm26771","Gm26871","Gm49359","Gpr17","Gpr37l1","Grip1","Grip2","Grp","Hbb-bs","Hcrt","Hcrtr2","Hdc","Hexb","Hmcn1","Htr2c","Icam5","Igfbp2","Igfbp5","Isl1","Itih3","Itm2a","Junb","Kcnc1","Kcnc2","Kcnk2","Kctd16","Lhx9","Lmnb2","Mag","Magel2","Mal","Matn4","Mbp","Meis2","Mgp","Mia","Mir99ahg","Mobp","Mrpl9","Msrb2","Neat1","Nefm","Nfasc","Nkx2-1","Nme7","Nms","Nnat","Npy","Npy1r","Nrgn","Nrn1","Nrxn3","Ntm","Ntng1","Nts","Ntsr2","Nxph4","Olig1","Otp","Oxt","Parpbp","Pbx1","Pcsk2","Pde10a","Pdgfra","Penk","Pitx2","Pla2g7","Plagl1","Pld4","Plp1","Pmch","Pnoc","Pomc","Pou3f2","Prkcd","Prxl2c","Ptbp3","Ptgds","Pthlh","Ptn","Ptpn3","Ptprn","Ptprz1","Pvalb","Qk","Rasal1","Rasgef1c","Rasgrf2","Rbms1","Resp18","Rinl","Rmst","Rorb","Rprm","Rprml","Rrad","Rreb1","S100a6","Scg2","Scrg1","Selplg","Serpine2","Sfrp2","Sgk1","Sim1","Sirt2","Six3","Slc10a4","Slc18a2","Slc32a1","Slc35d3","Slc6a11","Slc6a3","Sncg","Sparc","Sphkap","Sst","Syt7","Tac1","Tbx3os1","Tcf4","Tcf7l2","Tent5a","Th","Tiam2","Tmcc3","Tmem100","Tmem130","Tnxb","Traip","Trem2","Trf","Trh","Tspan7","Ubash3b","Unc13c","Vgf","Vip","Vipr2","Vstm2l","Vtn","Wfs1","Zbtb20")
marks = data.frame(marks)
colnames(marks)[1] = "Gene"
df2<- clustdf %>% dplyr::select("cluster",marks$Gene) 
df2$orig_cluster<-df2$cluster
df2$ID<-NA
	
# Neurônios, astrocitos, oligodendrocitos, OPCs e células imune/micróglia
df2<- df2 %>% mutate(ID = ifelse(Snap25 > 1, "Neurons", df2$ID))
df2<- df2 %>% mutate(ID = ifelse(Agt > 2, "Astrocytes", df2$ID))
df2<- df2 %>% mutate(ID = ifelse(Ctss > 1, "Microglia", df2$ID)) # Ok
df2<- df2 %>% mutate(ID = ifelse(Pdgfra > 2, "OPCs", df2$ID))    # Ok
df2<- df2 %>% mutate(ID = ifelse(Mbp > 6 & Mobp > 6, "Oligodendrocytes", df2$ID))

y<-dplyr::select(df2,cluster)
Idents(pbmc.rna.merge.samples)<-plyr::mapvalues(Idents(pbmc.rna.merge.samples), from = df2$cluster, to = df2$ID)
pbmc.rna.merge.samples$group<-Idents(pbmc.rna.merge.samples)
#####################################################################################
# Step 2 : Output pbmc.rna.merge.samples.
# Markers and markers limits were previously defined here used to calculate the celltypes.
#####################################################################################
# Process seurat on pbmc.atac.merge.samples
pbmc.atac.merge.samples <- RunTFIDF(pbmc.atac.merge.samples)
pbmc.atac.merge.samples <- FindTopFeatures(pbmc.atac.merge.samples, min.cutoff = "q0")
pbmc.atac.merge.samples <- RunSVD(pbmc.atac.merge.samples)
pbmc.atac.merge.samples <- RunUMAP(pbmc.atac.merge.samples, reduction = "lsi", dims = 2:30, reduction.name = "umap", reduction.key = "UMAP_1")
#####################################################################################
# Step 3 : Output pbmc.atac.merge.samples.
# RunTFIDF, FindTopFeatures and RunSVD are used for RunUMAP.
#####################################################################################
colour=c('Astrocytes' ='#fde725','OPCs' ='#5ec962','Microglia' ='#21918c','Neurons'='#3b528b','Oligodendrocytes'='#440154')
# get some data to use in the following examples
p1 <- DimPlot(pbmc.rna.merge.samples, group.by = "ident", label = TRUE,cols=colour) + NoLegend() + ggtitle("RNA cDNA-M1")
p2 <- DimPlot(pbmc.atac.merge.samples, group.by = "orig.ident", label = FALSE,cols="#3b528b") + NoLegend() + ggtitle("ATAC ATAC-M1")
plot_rna_atac<-p1 + p2

# FindClusters_resolution
png(filename=paste(output_dir,"plot_rna_atac.png",sep=""), width = 24, height = 12, res=600, units = "cm")
	plot_rna_atac
dev.off()
#####################################################################################
# Step 4 : plot_rna_atac
# Two DimPlots are ready : 
# 1) pbmc.rna.merge.samples with celltypes
# 2) pbmc.atac.merge.samples before predictions
# Celltypes are concisely groupped in clusters for RNA data
# ATAC umap seems coeherent to RNA umap, not in scale
#####################################################################################
# Make a copy of the seurat objectp
pbmc.atac.chrom.samples.predicted=pbmc.atac.merge.samples

# Identifying anchors between scRNA-seq and scATAC-seq dataset
# quantify gene activity
gene.activities <- GeneActivity(pbmc.atac.chrom.samples.predicted, features = VariableFeatures(object = pbmc.varialble.rna))

# add gene activities as a new assay
pbmc.atac.chrom.samples.predicted[["ACTIVITY"]] <- CreateAssayObject(counts = gene.activities)

# normalize gene activities
DefaultAssay(pbmc.atac.chrom.samples.predicted) <- "ACTIVITY"
pbmc.atac.chrom.samples.predicted <- NormalizeData(pbmc.atac.chrom.samples.predicted)
pbmc.atac.chrom.samples.predicted <- ScaleData(pbmc.atac.chrom.samples.predicted, features = rownames(pbmc.atac.chrom.samples.predicted))
	
# Identify anchors
transfer.anchors <- FindTransferAnchors(reference = pbmc.rna.merge.samples, query = pbmc.atac.chrom.samples.predicted, features = VariableFeatures(object = pbmc.varialble.rna),
    reference.assay = "RNA", query.assay = "ACTIVITY", reduction = "cca")
#####################################################################################
# Annotate scATAC-seq cells via label transfer
celltype.predictions <- TransferData(anchorset = transfer.anchors, refdata = Idents(pbmc.rna.merge.samples), weight.reduction = pbmc.atac.chrom.samples.predicted[["lsi"]], dims = 2:30)

# Add celltype predictions
pbmc.atac.chrom.samples.predicted <- AddMetaData(pbmc.atac.chrom.samples.predicted, metadata = celltype.predictions)
#####################################################################################
# Step 5 : plot_rna_atac
# Perform function GeneActivity + FindTransferAnchors
# FindTransferAnchors is meant to find anchors between RNA and ATAC
#####################################################################################
p1 <- DimPlot(pbmc.rna.merge.samples, group.by = "ident", label = TRUE,cols=colour) + NoLegend() + ggtitle("RNA cDNA-M1")
p2 <- DimPlot(pbmc.atac.chrom.samples.predicted, group.by = "predicted.id", label = TRUE,cols=colour)+ NoLegend() + ggtitle("ATAC ATAC-M1 predicted")
plot_rna_atac_predicted<-p1 + p2

# FindClusters_resolution
png(filename=paste(output_dir,"plot_rna_atac_predicted.png",sep=""), width = 24, height = 12, res=600, units = "cm")
	plot_rna_atac_predicted
dev.off()
#####################################################################################
# plot_rna_atac_predicted
# Here the clusters seem to be coeherent between atac - rna in size per celltype
#####################################################################################
pbmc.rna.merge.samples$seurat_annotations<-Idents(pbmc.rna.merge.samples)
predictions <- table(pbmc.atac.chrom.samples.predicted$predicted.id, pbmc.rna.merge.samples$seurat_annotations)
predictions <- predictions/rowSums(predictions)  # normalize for number of cells in each cell type
predictions <- as.data.frame(predictions)
pbmc.atac.chrom.samples.predicted$annotation_correct <- pbmc.atac.chrom.samples.predicted$predicted.id == pbmc.rna.merge.samples$seurat_annotations
p1 <- ggplot(predictions, aes(Var1, Var2, fill = Freq)) + geom_tile() +  xlab("Cell type annotation (RNA)") + ylab("Predicted cell type label (ATAC)") + theme_bw()+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + scale_fill_distiller()
    
correct <- length(which(pbmc.atac.chrom.samples.predicted$predicted.id == pbmc.rna.merge.samples$seurat_annotations))
incorrect <- length(which(pbmc.atac.chrom.samples.predicted$predicted.id != pbmc.rna.merge.samples$seurat_annotations))
data <- FetchData(pbmc.atac.chrom.samples.predicted, vars = c("prediction.score.max", "annotation_correct"))
p2 <- ggplot(data, aes(prediction.score.max, fill = annotation_correct, colour = annotation_correct)) +
    geom_density(alpha = 0.5) + theme_bw() + scale_fill_discrete(name = "Annotation Correct",
    labels = c(paste0("FALSE (n = ", incorrect, ")"), paste0("TRUE (n = ", correct, ")"))) + scale_color_discrete(name = "Annotation Correct",
    labels = c(paste0("FALSE (n = ", incorrect, ")"), paste0("TRUE (n = ", correct, ")"))) + xlab("Prediction Score")+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
plot_rna_atac_predicted_table<-p1 + p2

# FindClusters_resolution
png(filename=paste(output_dir,"plot_rna_atac_predicted.png",sep=""), width = 24, height = 14, res=600, units = "cm")
	plot_rna_atac_predicted_table
dev.off()

#####################################################################################
# Number of cells 
number_cells_rna=data.frame(table(Idents(pbmc.rna.merge.samples)))
number_cells_atac=data.frame(table(pbmc.atac.chrom.samples.predicted$predicted.id))

# Set rownames
rownames(number_cells_rna)<-number_cells_rna$Var1
rownames(number_cells_atac)<-number_cells_atac$Var1

# Define cells count
df_cells_count=data.frame(rna=number_cells_rna[c("Neurons","Oligodendrocytes","Astrocytes","OPCs","Microglia"),"Freq"],
atac=number_cells_atac[c("Neurons","Oligodendrocytes","Astrocytes","OPCs","Microglia"),"Freq"])

# Rownames
rownames(df_cells_count)<-c("Neurons","Oligodendrocytes","Astrocytes","OPCs","Microglia")

# Set collumn label
df_cells_count$Label=rownames(df_cells_count)

p <- ggplot(df_cells_count, aes(rna, atac,label = Label))
p1<-p + geom_point()+ theme_bw() + ggtitle("Number of cells per type")+  geom_text()

# FindClusters_resolution
png(filename=paste(output_dir,"/Number_of_cells_per_type.png",sep=""), width = 10, height = 10, res=600, units = "cm")
	p1
dev.off()
#####################################################################################
# Here the correlation between the number of cells per celltype
# Noteworhy that oligodentrocytes are less correlated than other celltypes
#####################################################################################
# note that we restrict the imputation to variable genes from scRNA-seq, but could impute the
# full transcriptome if we wanted to
genes.use <- VariableFeatures(pbmc.rna.merge.samples)
refdata <- GetAssayData(pbmc.rna.merge.samples, assay = "RNA", slot = "data")[genes.use, ]

# refdata (input) contains a scRNA-seq expression matrix for the scRNA-seq cells.  imputation
# (output) will contain an imputed scRNA-seq matrix for each of the ATAC cells
imputation <- TransferData(anchorset = transfer.anchors, refdata = refdata, weight.reduction = pbmc.atac.chrom.samples.predicted[["lsi"]],
    dims = 2:30)
pbmc.atac.chrom.samples.predicted[["RNA"]] <- imputation

# Combine datasets
coembed <- merge(x = pbmc.rna.merge.samples, y = pbmc.atac.chrom.samples.predicted)

# Finally, we run PCA and UMAP on this combined object, to visualize the co-embedding of both
# datasets
coembed <- ScaleData(coembed, features = genes.use, do.scale = FALSE)
coembed <- RunPCA(coembed, features = genes.use, verbose = FALSE)
coembed <- RunUMAP(coembed, dims = 1:30)

#DimPlot(coembed, group.by = c("orig.ident", "seurat_annotations"))
# Create plot
dimplot<-DimPlot(pbmc.rna.atac.samples.coembed, group.by = c("ident", "predicted.id"))

# FindClusters_resolution
png(filename=paste(output_dir,"/coembed_results.png",sep=""), width = 10, height = 10, res=600, units = "cm")
	dimplot
dev.off()
