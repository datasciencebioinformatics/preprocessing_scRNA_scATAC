library(dplyr)
library(Seurat)
library(patchwork)
library(gridExtra)
library(ggplot2)
library(plyr)
library(SeuratObject)
library(Seurat)
library("harmony")
library(rhdf5)
library("hdf5r")
library("Signac")
library(Seurat)
options(Seurat.object.assay.version = "v5")
library(Signac)
library(EnsDb.Mmusculus.v79)
library(dplyr)
library(ggplot2)
library(loupeR)
library(ggbeeswarm)
colour=c('Astrocytes' ='#fde725','OPCs' ='#5ec962','Microglia' ='#21918c','Neurons'='#3b528b','Oligodendrocytes'='#440154')
#####################################################################################
# First, create ATAC and RNA objects for all samples 
# follow https://github.com/datasciencebioinformatics/preprocessing_scRNA_scATAC/blob/main/SeuratFullMultiomeObject
# it will creante two main objects ATAC_objects_combined e RNA_objects_combined
#####################################################################################
# ATAC analysis add gene annotation information
annotations <- GetGRangesFromEnsDb(ensdb = EnsDb.Mmusculus.v79)
seqlevelsStyle(annotations) <- "UCSC"
genome(annotations) <- "mm10"
#####################################################################################
output_dir="/home/felipe/results_seurat/"                                           #
#output_dir="/home/singlecell/results_seurat/"                                      #
#####################################################################################
load("./RNA_objects_combined.RData")                                                #
#####################################################################################
# Rename cells
RNA_objects_combined$dataset<-paste("cDNA-M",paste(substring(Cells(RNA_objects_combined),18,18)),sep="")

# Analyse RNA merge and IntegrateLayers  
RNA_objects_combined_merge<-RNA_objects_combined
RNA_objects_combined_integ<-RNA_objects_combined
#####################################################################################
# Calculate NormalizeData
RNA_objects_combined_integ <- NormalizeData(RNA_objects_combined_integ, normalization.method = "LogNormalize", scale.factor = 10000)
RNA_objects_combined_integ.varialble <- FindVariableFeatures(object=RNA_objects_combined_integ , selection.method = "vst",nfeatures = 3000) # Consider the 2000 genes
RNA_objects_combined_integ <- SCTransform(RNA_objects_combined_integ)
RNA_objects_combined_integ<- ScaleData(RNA_objects_combined_integ,block.size = 1000,do.scale = TRUE,do.center = TRUE,features=VariableFeatures(object = RNA_objects_combined_integ.varialble))
RNA_objects_combined_integ <- RunPCA(RNA_objects_combined_integ, features = VariableFeatures(object = RNA_objects_combined_integ.varialble))
RNA_objects_combined_integ <- RunHarmony(RNA_objects_combined_integ, group.by.vars = c('dataset'),reduction = "pca", assay.use = "RNA", reduction.save = "harmony")
RNA_objects_combined_integ <- IntegrateLayers(object = RNA_objects_combined_integ, method = HarmonyIntegration,orig.reduction = "pca", new.reduction = "harmony",  verbose = FALSE)
RNA_objects_combined_integ <- RunUMAP(RNA_objects_combined_integ, dims = 1:50,reduction = "harmony",reduction.name="harmony.umap") # Optmize number of dimensions
DimPlot_RNA_harmony_umap   <- DimPlot(RNA_objects_combined_integ, label = FALSE,cols=colour,reduction="harmony.umap")  + ggtitle("IntegrateLayers RNA cDNA-M1/M2/M3") + NoLegend()
#####################################################################################
# Calculate NormalizeData
RNA_objects_combined_merge <- NormalizeData(RNA_objects_combined_merge, normalization.method = "LogNormalize", scale.factor = 10000)
RNA_objects_combined_merge.varialble <- FindVariableFeatures(object=RNA_objects_combined_merge , selection.method = "vst",nfeatures = 3000) # Consider the 2000 genes
RNA_objects_combined_merge <- SCTransform(RNA_objects_combined_merge)
RNA_objects_combined_merge <- ScaleData(RNA_objects_combined_merge,block.size = 1000,do.scale = TRUE,do.center = TRUE,features=VariableFeatures(object = RNA_objects_combined_merge.varialble))
RNA_objects_combined_merge <- RunPCA(RNA_objects_combined_merge, features = VariableFeatures(object = RNA_objects_combined_merge.varialble))
RNA_objects_combined_merge <- RunHarmony(RNA_objects_combined_merge, group.by.vars = c('dataset'),reduction = "pca", assay.use = "RNA", reduction.save = "harmony")
RNA_objects_combined_merge <- RunUMAP(RNA_objects_combined_merge, dims = 1:50,reduction = "pca",reduction.name="pca.umap")         # Optmize number of dimensions
DimPlot_RNA_harmony_pca    <- DimPlot(RNA_objects_combined_merge, group.by = "dataset", label = FALSE,reduction="pca.umap")  + ggtitle("Merge RNA cDNA-M1/M2/M3") 
#####################################################################################
# FindClusters_resolution
png(filename=paste(output_dir,"RNA_UMAP_visualization_Harmony_PCA.png",sep=""), width = 30, height = 12, res=600, units = "cm")
	grid.arrange(DimPlot_RNA_harmony_umap,DimPlot_RNA_harmony_pca,ncol = 2)
dev.off()
#####################################################################################
save(RNA_objects_combined_merge, file = "./RNA_objects_combined_merge.RData")
save(RNA_objects_combined_integ, file = "./RNA_objects_combined_integ.RData")
####################################################################################
load("./ATAC_objects_combined.RData")                                              #
####################################################################################
# Rename cells
ATAC_objects_combined$dataset<-paste("ATAC-M",paste(substring(Cells(ATAC_objects_combined),18,18)),sep="")

# Analyse ATAC merge and IntegrateLayers  
ATAC_objects_combined_merge<-ATAC_objects_combined
ATAC_objects_combined_integ<-ATAC_objects_combined
####################################################################################
# Calculate NormalizeData
ATAC_objects_combined_integ <- DietSeurat(ATAC_objects_combined_integ,counts = FALSE,data = TRUE,scale.data = FALSE, assays = "ATAC", dimreducs = FALSE,   graphs = FALSE, misc = FALSE)
ATAC_objects_combined_integ <- NormalizeData(ATAC_objects_combined_integ, normalization.method = "LogNormalize", scale.factor = 10000)
ATAC_objects_combined_integ.varialble <- FindVariableFeatures(object=ATAC_objects_combined_integ , selection.method = "vst",nfeatures = 3000) # Consider the 2000 genes
ATAC_objects_combined_integ <- SCTransform(ATAC_objects_combined_integ)
ATAC_objects_combined_integ <- ScaleData(ATAC_objects_combined_integ,block.size = 1000,do.scale = TRUE,do.center = TRUE,features=VariableFeatures(object = ATAC_objects_combined_integ.varialble))
ATAC_objects_combined_integ <- RunPCA(ATAC_objects_combined_integ, features = VariableFeatures(object = ATAC_objects_combined_integ.varialble))
ATAC_objects_combined_integ <- RunHarmony(ATAC_objects_combined_integ, group.by.vars = c('dataset'),reduction = "pca", assay.use = "ATAC", reduction.save = "harmony")
ATAC_objects_combined_integ <- IntegrateLayers(object = RNA_objects_combined_integ, method = HarmonyIntegration,orig.reduction = "pca", new.reduction = "harmony",  verbose = FALSE)
ATAC_objects_combined_integ <- RunUMAP(ATAC_objects_combined_integ, dims = 1:50,reduction = "harmony",reduction.name="harmony.umap") # Optmize number of dimensions
DimPlot_ATAC_harmony_umap   <- DimPlot(ATAC_objects_combined_integ, label = FALSE,cols=colour,reduction="harmony.umap")  + ggtitle("IntegrateLayers ATAC cDNA-M1/M2/M3") + NoLegend()
####################################################################################
# Process seurat on ATAC_objects_combined_merge
ATAC_objects_combined_merge <- RunTFIDF(ATAC_objects_combined_merge)
ATAC_objects_combined_merge <- FindTopFeatures(ATAC_objects_combined_merge, min.cutoff = "q0")
ATAC_objects_combined_merge <- RunSVD(ATAC_objects_combined_merge)
ATAC_objects_combined_merge <- RunUMAP(ATAC_objects_combined_merge, reduction = "lsi", dims = 2:30, reduction.name = "umap", reduction.key = "UMAP_1")
# Dimplot
DimPlot_ATAC_harmony_merge_1  <- DimPlot(ATAC_objects_combined_merge, group.by = "dataset", label = FALSE,reduction="umap")  + ggtitle("Merge ATAC ATAC-M1/M2/M3") 
DimPlot_ATAC_harmony_merge_2  <- DimPlot(ATAC_objects_combined_merge,cols=colour, label = FALSE,reduction="umap")  + ggtitle("Merge ATAC ATAC-M1/M2/M3") + NoLegend()
####################################################################################
save(ATAC_objects_combined_merge, file = "./ATAC_objects_combined_merge.RData")
#####################################################################################
# FindClusters_resolution
png(filename=paste(output_dir,"ATAC_UMAP_visualization_Harmony_PCA.png",sep=""), width = 30, height = 12, res=600, units = "cm")
	grid.arrange(DimPlot_ATAC_harmony_merge_2,DimPlot_ATAC_harmony_merge_1,ncol = 2)
dev.off()
#####################################################################################
# I stopped here
load("./RNA_objects_combined_integ.RData")
load("./ATAC_objects_combined_merge.RData")

ATAC_objects_combined=ATAC_objects_combined_merge
RNA_objects_combined=RNA_objects_combined_integ
#####################################################################################
#- ATAC filters : paper
#	- TSS enrichment greater than 1    : TSS.enrichment
#	- nucleosome signal greater than 2 : nucleosome_signal	
#	- between 1000 and 30000 peaks with >1 readcount detected in each cell : nFeature_ATAC
#	- Common cells among samples       : Rscript
#	- Common cells between RNA+ATAC    : Rscript
#- RNA filters : paper
#	- fraction of mitochondrial genes less than 30% : percent.mt
#	- between 100 and 7500 genes detected in each cell : nFeature_RNA
#	- Common cells among samples	   : Rscript
#	- Common cells between RNA+ATAC    : Rscript
#- Quality control plot Vioilin plot
#	- TSS/nuclueosome/peaks per cell
#	- mitocondial/genes per cell
#####################################################################################
# Create combined multiome object
combined.cell<-Cells(ATAC_objects_combined)[Cells(ATAC_objects_combined) %in% Cells(RNA_objects_combined)]
#####################################################################################
# add the ATAC-seq assay
grange.counts <- StringToGRanges(rownames(ATAC_objects_combined), sep = c(":", "-"))

# Use grange
grange.use <- seqnames(grange.counts) %in% standardChromosomes(grange.counts)

# Combine datasets with same cells
ATAC_objects_combined <- ATAC_objects_combined[,combined.cell]
RNA_objects_combined  <- RNA_objects_combined[,combined.cell]
#####################################################################################
# I stopped here 
# try to do this https://stuartlab.org/signac/articles/hypotha_multiomic
# create a Seurat object containing the RNA adata
hypotha <- RNA_objects_combined

# create ATAC assay and add it to the object
hypotha[["ATAC"]] <- ATAC_objects_combined[["ATAC"]]
#####################################################################################
save(hypotha, file = "./hypotha.RData") # Step 1
#####################################################################################
# Quality control 
DefaultAssay(hypotha) <- "ATAC"

hypotha <- NucleosomeSignal(hypotha)
hypotha <- TSSEnrichment(hypotha,assay ="ATAC", tss.positions =grange.counts)

#####################################################################################
save(hypotha, file = "./hypotha2.RData") # Step 2
#####################################################################################
hypotha_bck=hypotha
#####################################################################################
# Add nCount_ATAC and Experiment
hypotha_bck@meta.data$nCount_ATAC<-ATAC_objects_combined_merge@meta.data[rownames(hypotha_bck@meta.data),"nCount_ATAC"]
hypotha_bck@meta.data$Experiment<-"M1/M2/M3"

# Save all data.frames
hypotha_bck_meta_data=rbind(data.frame(rownames(hypotha_bck@meta.data),Value=hypotha_bck@meta.data$nCount_RNA,experiment="nCount_RNA",Sample=paste(substring(rownames(hypotha_bck@meta.data),18,20)),Experiment="M1/M2/M3"),
data.frame(rownames(hypotha_bck@meta.data),Value=hypotha_bck@meta.data$nCount_ATAC,experiment="nCount_ATAC",Sample=paste(substring(rownames(hypotha_bck@meta.data),18,20)),Experiment="M1/M2/M3"),
data.frame(rownames(hypotha_bck@meta.data),Value=hypotha_bck@meta.data$TSS.enrichment,experiment="TSS.enrichment",Sample=paste(substring(rownames(hypotha_bck@meta.data),18,20)),Experiment="M1/M2/M3"),
data.frame(rownames(hypotha_bck@meta.data),Value=hypotha_bck@meta.data$nucleosome_signal,experiment="nucleosome_signal",Sample=paste(substring(rownames(hypotha_bck@meta.data),18,20)),Experiment="M1/M2/M3"))

# VlnPlot before filter
before_filter<-ggplot(hypotha_bck_meta_data, aes(x=Sample, y=Value,fill=Sample)) +  geom_violin(trim=TRUE,alpha = 0.25) + facet_wrap(~experiment,scales="free_y",  ncol=4)+ theme_bw()+ scale_fill_manual(values=c("#440154FF","#1F968BFF","#FDE725FF")) + ggtitle("Before filtering")
#####################################################################################
# Here it may not work as in the tutorial because I am using three samples per experiment, ATAC or RNA
# filter out low quality cells
hypotha_bck <- subset(
  x = hypotha_bck,
  subset = nCount_ATAC < 30000 &
    nCount_RNA < 7500 &
    nCount_ATAC > 1000 &
    nCount_RNA > 100 &
    nucleosome_signal > 2 &
    TSS.enrichment > 1
)

# Save all data.frames
hypotha_bck_meta_data=rbind(data.frame(rownames(hypotha_bck@meta.data),Value=hypotha_bck@meta.data$nCount_RNA,experiment="nCount_RNA",Sample=paste(substring(rownames(hypotha_bck@meta.data),18,20)),Experiment="M1/M2/M3"),
data.frame(rownames(hypotha_bck@meta.data),Value=hypotha_bck@meta.data$nCount_ATAC,experiment="nCount_ATAC",Sample=paste(substring(rownames(hypotha_bck@meta.data),18,20)),Experiment="M1/M2/M3"),
data.frame(rownames(hypotha_bck@meta.data),Value=hypotha_bck@meta.data$TSS.enrichment,experiment="TSS.enrichment",Sample=paste(substring(rownames(hypotha_bck@meta.data),18,20)),Experiment="M1/M2/M3"),
data.frame(rownames(hypotha_bck@meta.data),Value=hypotha_bck@meta.data$nucleosome_signal,experiment="nucleosome_signal",Sample=paste(substring(rownames(hypotha_bck@meta.data),18,20)),Experiment="M1/M2/M3"))

# VlnPlot after filter
after_filter<-ggplot(hypotha_bck_meta_data, aes(x=Sample, y=Value,fill=Sample)) +  geom_violin(trim=TRUE,alpha = 0.25) + facet_wrap(~experiment,scales="free_y",  ncol=4)+ theme_bw()+ scale_fill_manual(values=c("#440154FF","#1F968BFF","#FDE725FF")) + ggtitle("After filtering")
#####################################################################################
# Plot quality filter
png(filename=paste(output_dir,"plot_VlnPlot_multiome_rna_atac.png",sep=""), width = 24, height = 24, res=600, units = "cm")
	grid.arrange(before_filter,after_filter, nrow = 2)
dev.off()
#####################################################################################
hypotha_bck=hypotha
save(hypotha, file = "./hypotha3.RData")
#####################################################################################
#save(hypotha, file = "./hypotha_bck.RData") # I stopped here
load("./hypotha_bck.RData") # I stopped here
load("./hypotha.RData") # I stopped here
#####################################################################################
DefaultAssay(hypotha) <- "RNA"
hypotha <- NormalizeData(hypotha, normalization.method = "LogNormalize", scale.factor = 10000)
hypotha.varialble <- FindVariableFeatures(object=hypotha , selection.method = "vst",nfeatures = 3000) # Consider the 2000 genes
hypotha <- SCTransform(hypotha)
hypotha<- ScaleData(hypotha,block.size = 1000,do.scale = TRUE,do.center = TRUE,features=VariableFeatures(object = hypotha.varialble))
hypotha <- RunPCA(hypotha, features = VariableFeatures(object = hypotha.varialble))
hypotha <- RunHarmony(hypotha, group.by.vars = c('dataset'),reduction = "pca", assay.use = "RNA", reduction.save = "harmony")
hypotha <- IntegrateLayers(object = hypotha, method = HarmonyIntegration,orig.reduction = "pca", new.reduction = "harmony",  verbose = FALSE)
hypotha <- RunUMAP(hypotha, dims = 1:50,reduction = "harmony",reduction.name="harmony.umap") # Optmize number of dimensions
#####################################################################################
DefaultAssay(hypotha) <- "ATAC"
hypotha <- RunTFIDF(hypotha)
hypotha <- FindTopFeatures(hypotha, min.cutoff = "q0")
hypotha <- RunSVD(hypotha)
hypotha <- RunUMAP(hypotha, reduction = "lsi", dims = 2:30, reduction.name = "umap", reduction.key = "UMAP_1")
#####################################################################################
save(hypotha, file = "./hypotha4.RData") # Save hypotha Step 3
#####################################################################################
# Annotating cell types 
# build a joint neighbor graph using both assays
hypotha <- FindMultiModalNeighbors(
  object = hypotha,
  reduction.list = list("pca", "lsi"), 
  dims.list = list(1:20, 2:50),k.nn = 50
)
#####################################################################################
#save(hypotha, file = "./hypotha_bck.RData") # Save hypotha Step 3
#####################################################################################
# build a joint UMAP visualization
hypotha <- RunUMAP(
  object = hypotha, 
  nn.name = "weighted.nn", reduction.name = "wnn.umap", reduction.key = "wnnUMAP_"
)
#####################################################################################
save(hypotha, file = "./hypotha4.RData") # Save hypotha Step 4
#####################################################################################
# FindClusters_resolution
hypotha.2 <- RunUMAP(hypotha, nn.name = "weighted.nn", reduction.name = "wnn.umap", reduction.key = "wnnUMAP_")
hypotha.2 <- FindClusters(hypotha.2, graph.name = "wsnn", algorithm = 1, resolution = 0.1, verbose = FALSE)
#####################################################################################
# Create DimMap
DimPlot_Multim_rna_atac<-DimPlot(hypotha, label = TRUE, repel = TRUE, group.by = "dataset", reduction = "wnn.umap",cols=colour) + ggtitle("Multimodal RNA+ATC M1/M2/M3")+ NoLegend()

# Find DimPlot_weighted_nn
DimPlot_weighted_nn <- DimPlot(hypotha.2, reduction = 'wnn.umap', label = TRUE, repel = TRUE, label.size = 2.5) + ggtitle("WNN RNA+ATC M1/M2/M3")+ NoLegend()

# FindClusters_resolution
png(filename=paste(output_dir,"joint_Dimplot_visualization.png",sep=""), width = 12, height = 24, res=600, units = "cm")
	grid.arrange(DimPlot_Multim_rna_atac,DimPlot_weighted_nn,ncol = 2)
dev.off()
#####################################################################################
# Annotating cell types 
# Create reference
load("RNA_objects_combined_integ.RData")
hypotha.rna.merge.samples=RNA_objects_combined_integ
Idents(hypotha.rna.merge.samples)<-paste("cDNA-M",substring(Cells(hypotha.rna.merge.samples),18,18),sep="")
#####################################################################################
# Calculate NormalizeData
hypotha.rna.merge.samples <- FindNeighbors(RNA_objects_combined_integ, dims = 1:50,reduction="harmony")
hypotha.rna.merge.samples <- FindClusters(hypotha.rna.merge.samples,reduction = "pca",resolution = 0.12)
#####################################################################################
# Step 1 : Output hypotha.rna.merge.samples
# Data is being normalized and 3000 variable genes are further considered. Data is then scaled to be used in PCA, UMAP and FindNeighbors.
# Important to note now, there is only one sample therefore batch correction is commented out.
# Run FindNeighbors
# Run FindClusters # Find clusters for only RNA
#####################################################################################
#save(hypotha.rna.merge.samples, file = "./hypotha.rna.merge.samples.RData") # Save hypotha Step 5
#####################################################################################
DefaultAssay(hypotha.rna.merge.samples) <- "RNA"
clustavg<-AverageExpression(hypotha.rna.merge.samples)
clustdf<-as.data.frame(clustavg$RNA)
clustdf<-t(clustdf)
clustdf<-as_tibble(clustdf, rownames = "cluster")
marks<-c("Prr5l","St18","Syt1","Mog","Snap25","1700016P03Rik","1700047M11Rik","4930447C04Rik","6330403K07Rik","9630013A20Rik","Adam23","Adcyap1","Agrp","Agt","Apod","Apoe","Arhgap36","Arpp21","Atp1a2","Auts2","Avp","B230216N24Rik","Baiap2","Bcas1","C130073E24Rik","C1qa","C1qb","C1qc","C1ql1","C1ql3","Caly","Camkv","Caprin2","Cartpt","Cbln1","Ccdc136","Cck","Ccn3","Cd9","Cdh23","Celf2","Chrm3","Cit","Cited1","Cldn10","Cldn11","Cntnap5a","Col11a1","Col11a2","Col18a1","Col24a1","Col25a1","Coro6","Cpne7","Cpne9","Crhbp","Cryab","Csf1r","Csf2rb2","Cspg4","Cst3","Ctss","Cyp11a1","Dclk1","Ddc","Dgkb","Dlk1","Ebf1","Ecel1","Egr1","Elavl2","En1","Epha10","Esyt3","Fars2","Fign","Fos","Fxyd6","Gabra1","Gad1","Gad2","Gal","Ghrh","Gja1","Gjc3","Gm20515","Gm20751","Gm26771","Gm26871","Gm49359","Gpr17","Gpr37l1","Grip1","Grip2","Grp","Hbb-bs","Hcrt","Hcrtr2","Hdc","Hexb","Hmcn1","Htr2c","Icam5","Igfbp2","Igfbp5","Isl1","Itih3","Itm2a","Junb","Kcnc1","Kcnc2","Kcnk2","Kctd16","Lhx9","Lmnb2","Mag","Magel2","Mal","Matn4","Mbp","Meis2","Mgp","Mia","Mir99ahg","Mobp","Mrpl9","Msrb2","Neat1","Nefm","Nfasc","Nkx2-1","Nme7","Nms","Nnat","Npy","Npy1r","Nrgn","Nrn1","Nrxn3","Ntm","Ntng1","Nts","Ntsr2","Nxph4","Olig1","Otp","Oxt","Parpbp","Pbx1","Pcsk2","Pde10a","Pdgfra","Penk","Pitx2","Pla2g7","Plagl1","Pld4","Plp1","Pmch","Pnoc","Pomc","Pou3f2","Prkcd","Prxl2c","Ptbp3","Ptgds","Pthlh","Ptn","Ptpn3","Ptprn","Ptprz1","Pvalb","Qk","Rasal1","Rasgef1c","Rasgrf2","Rbms1","Resp18","Rinl","Rmst","Rorb","Rprm","Rprml","Rrad","Rreb1","S100a6","Scg2","Scrg1","Selplg","Serpine2","Sfrp2","Sgk1","Sim1","Sirt2","Six3","Slc10a4","Slc18a2","Slc32a1","Slc35d3","Slc6a11","Slc6a3","Sncg","Sparc","Sphkap","Sst","Syt7","Tac1","Tbx3os1","Tcf4","Tcf7l2","Tent5a","Th","Tiam2","Tmcc3","Tmem100","Tmem130","Tnxb","Traip","Trem2","Trf","Trh","Tspan7","Ubash3b","Unc13c","Vgf","Vip","Vipr2","Vstm2l","Vtn","Wfs1","Zbtb20")
marks = data.frame(marks)
colnames(marks)[1] = "Gene"
df2<- clustdf %>% dplyr::select("cluster",marks$Gene) 
df2$orig_cluster<-df2$cluster
df2$ID<-NA
	
# Neurônios, astrocitos, oligodendrocitos, OPCs e células imune/micróglia
df2<- df2 %>% mutate(ID = ifelse(Snap25 > 0.5, "Neurons", df2$ID))
df2<- df2 %>% mutate(ID = ifelse(Agt > 2, "Astrocytes", df2$ID))
df2<- df2 %>% mutate(ID = ifelse(Ctss > 1, "Microglia", df2$ID)) # Ok
df2<- df2 %>% mutate(ID = ifelse(Pdgfra > 2, "OPCs", df2$ID))    # Ok
df2<- df2 %>% mutate(ID = ifelse(Mbp > 2 & Mobp > 2, "Oligodendrocytes", df2$ID))

y<-dplyr::select(df2,cluster)
Idents(hypotha.rna.merge.samples)<-plyr::mapvalues(Idents(hypotha.rna.merge.samples), from = df2$cluster, to = df2$ID)
hypotha.rna.merge.samples$group<-Idents(hypotha.rna.merge.samples)
reference=hypotha.rna.merge.samples
#####################################################################################
save(reference, file = "./reference.RData") # Save hypotha Step 5
#####################################################################################
# Annotating cell types 
Idents(hypotha) <- Idents(reference)
#####################################################################################
# Step 2 : Output hypotha.rna.merge.samples.
# Markers and markers limits were previously defined here used to calculate the celltypes.
#####################################################################################
load("./ATAC_objects_combined_merge.RData")
load("./reference.RData")
load("./hypotha4.RData")
load("./RNA_objects_combined_integ.RData")
#####################################################################################
# FindClusters_resolution
hypotha.2 <- RunUMAP(hypotha, nn.name = "weighted.nn", reduction.name = "wnn.umap", reduction.key = "wnnUMAP_")
hypotha.2 <- FindClusters(hypotha.2, graph.name = "wsnn", algorithm = 1, resolution = 0.1, verbose = FALSE)
#####################################################################################
# normalize gene activities
ATAC_objects_combined_merge <- FindTopFeatures(ATAC_objects_combined_merge, min.cutoff = 10)
ATAC_objects_combined_merge <- NormalizeData(ATAC_objects_combined_merge)
ATAC_objects_combined_merge <- ScaleData(ATAC_objects_combined_merge, features = rownames(ATAC_objects_combined_merge))
#####################################################################################
# Create DimMap
colour=c('Astrocytes' ='#fde725','OPCs' ='#5ec962','Microglia' ='#21918c','Neurons'='#3b528b','Oligodendrocytes'='#440154')
DimPlot_Multim_rna_atac<-DimPlot(hypotha, label = TRUE, repel = TRUE, group.by = "dataset", reduction = "wnn.umap",cols=colour) + ggtitle("Multimodal RNA+ATC M1/M2/M3")+ NoLegend()
DimPlot_weighted_nn <- DimPlot(hypotha.2, reduction = 'wnn.umap', label = TRUE, repel = TRUE, label.size = 2.5) + ggtitle("WNN RNA+ATC M1/M2/M3")+ NoLegend()
DimPlot_RNA <- DimPlot(reference, group.by = "ident", label = TRUE,cols=colour)  + ggtitle("RNA cDNA-M1/M2/M3") + NoLegend()
#DimPlot_ATAC <- DimPlot(ATAC_objects_combined_merge, group.by = "celltype.predictions", label = TRUE,cols=colour, reduction = "umap") + ggtitle("ATAC ATAC-M1") + NoLegend()
DimPlot_ATAC <- DimPlot(ATAC_objects_combined_merge, group.by = "dataset", label = TRUE, reduction = "umap") + ggtitle("ATAC-M1/M2/M3") + NoLegend()

# FindClusters_resolution
png(filename=paste(output_dir,"joint_UMAP_visualization.png",sep=""), width = 24, height = 24, res=600, units = "cm")
	grid.arrange(DimPlot_RNA,DimPlot_ATAC,DimPlot_Multim_rna_atac,DimPlot_weighted_nn,ncol = 2)
dev.off()





















hypotha=hypotha_bck

# call peaks using MACS2
# to ask if makes sense to analyse peaks per sample
peaks <- CallPeaks(hypotha)

# remove peaks on nonstandard chromosomes and in genomic blacklist regions
peaks <- keepStandardChromosomes(peaks, pruning.mode = "coarse")
peaks <- subsetByOverlaps(x = peaks, ranges = blacklist_mm10, invert = TRUE)
#####################################################################################
save(peaks, file = "./peaks.RData")
#####################################################################################
# quantify counts in each peak
macs2_counts <- FeatureMatrix(
  fragments = Fragments(hypotha[["ATAC"]]),
  features = peaks,
  cells = colnames(hypotha)
)
annot=annotations
# create a new assay using the MACS2 peak set and add it to the Seurat object
hypotha[["peaks"]] <- CreateChromatinAssay(
  counts = macs2_counts,
  fragments = Fragments(hypotha[["ATAC"]]),
  annotation = annot
)

