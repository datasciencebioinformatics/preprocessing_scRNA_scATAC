library(dplyr)
library(Seurat)
library(patchwork)
library(gridExtra)
library(ggplot2)
library(plyr)
library(SeuratObject)
library(Seurat)
library("harmony")
library(rhdf5)
library("hdf5r")
library("Signac")
library(Seurat)
options(Seurat.object.assay.version = "v5")
library(Signac)
library(EnsDb.Mmusculus.v79)
library(dplyr)
library(ggplot2)
library(loupeR)
colour=c('Astrocytes' ='#fde725','OPCs' ='#5ec962','Microglia' ='#21918c','Neurons'='#3b528b','Oligodendrocytes'='#440154')
#####################################################################################
output_dir="/home/felipe/results_seurat/"
#output_dir="/home/singlecell/results_seurat/"
#####################################################################################
# ATAC analysis add gene annotation information
annotations <- GetGRangesFromEnsDb(ensdb = EnsDb.Mmusculus.v79)
seqlevelsStyle(annotations) <- "UCSC"
genome(annotations) <- "mm10"

#library(TxDb.Mmusculus.UCSC.mm10.knownGene)
#annotations <- transcripts(TxDb.Mmusculus.UCSC.mm10.knownGene)
#####################################################################################
# Set number of samples
n_samples=3

# Create list to save seurat objects for ATAC
list_ATAC_gr=list()
list_ATAC_fr=list()
list_ATAC_peaks=list()
list_ATAC_chrom_assay=list() 

# For each sample
for (sample in 1:n_samples)
{
	###### First the ATAC folder
	# Set intput dir ATAC-M1 and seurat objects
	ATAC_file_h5           <-  paste("/home/felipe/snATACSeq_out/ATAC-M",sample,"/filtered_peak_bc_matrix.h5",sep="")
	ATAC_singlecell_file   <-  paste("/home/felipe/snATACSeq_out/ATAC-M",sample,"/singlecell.csv",sep="")
	ATAC_fragment_file     <-  paste("/home/felipe/snATACSeq_out/ATAC-M",sample,"/fragments.tsv.gz",sep="") 
	
	# Set intput dir ATAC-M1 and seurat objects
	ATAC_h5             <-  Read10X_h5(ATAC_file_h5)
	ATAC_singlecell     <-  read.csv(file = ATAC_singlecell_file,header = TRUE,row.names = 1)
	ATAC_fragment       <-  CreateFragmentObject(ATAC_fragment_file)
	ATAC_chrom_assay    <-  CreateChromatinAssay(counts = ATAC_h5,sep = c(":", "-"), annotation = annotations,fragments =ATAC_fragment_file)
	ATAC_hypotha        <-  CreateSeuratObject(counts = ATAC_chrom_assay,assay = "peaks")
	ATAC_peaks	    <-  CallPeaks(object = ATAC_hypotha)	
	ATAC_gr 	    <-  makeGRangesFromDataFrame(ATAC_peaks)
	
	# Add object to list
	list_ATAC_peaks[[paste("ATAC-M",sample,sep="")]]<-ATAC_peaks
	list_ATAC_chrom_assay[[paste("ATAC-M",sample,sep="")]]<-ATAC_chrom_assay
	list_ATAC_gr[[paste("ATAC-M",sample,sep="")]]<-ATAC_file_h5	
	list_ATAC_fr[[paste("ATAC-M",sample,sep="")]]<-ATAC_fragment	
}
#####################################################################################
save(list_ATAC_gr, file =     "./list_ATAC_gr.RData")                           #
save(list_ATAC_fr, file =     "./list_ATAC_fr.RData")                           #
save(list_ATAC_peaks, file =     "./list_ATAC_peaks.RData")                     #
save(list_ATAC_fr, file =     "./list_ATAC_fr.RData")                           #
save(list_ATAC_chrom_assay, file =     "./list_ATAC_chrom_assay.RData")         #
#####################################################################################
# Create a unified set of peaks to quantify in each dataset
combined.peaks <- reduce(x = unlist(list_ATAC_peaks))

# Filter out bad peaks based on length
peakwidths <- width(combined.peaks)

#####################################################################################
# list_ATAC_peaks=list()
# For each sample
for (sample in 1:n_samples)
{ 
	# Quantify peaks in each dataset 
	ATAC_counts <- FeatureMatrix(
	  fragments = ATAC_fragment,
	  features = combined.peaks,
	  cells = rownames(ATAC_fragment)
	)
	# For each sample, cerate chrom_assay and atac obje
	ATAC_chrom_assay    <-  CreateChromatinAssay(counts = ATAC_counts,fragments =ATAC_fragment_file)
	ATAC_obje <- CreateSeuratObject(pbmc500_assay, assay = "ATAC")
	list_ATAC_peaks[[sample]]<-ATAC_obje
}
#####################################################################################
# https://stuartlab.org/signac/articles/merging
# Change names
# Check merged objects
# merge
ATAC_objects_combined <- merge(
  x = list_ATAC_peaks[[1]],
  y = list_ATAC_peaks[2:length(names(list_ATAC_peaks))],
  add.cell.ids = names(list_ATAC_peaks)
)

# Merge samples
RNA_objects_combined <- merge(
  x = list_RNA_objects[[1]],
  y = list_RNA_objects[2:length(names(list_RNA_objects))],
  add.cell.ids = names(list_RNA_objects)
)
#####################################################################################
save(ATAC_objects_combined, file = "./ATAC_objects_combined.RData")
#####################################################################################
# process 
ATAC_objects_combined <- RunTFIDF(ATAC_objects_combined)
ATAC_objects_combined <- FindTopFeatures(ATAC_objects_combined, min.cutoff = 20)
ATAC_objects_combined <- RunSVD(ATAC_objects_combined)
ATAC_objects_combined <- RunUMAP(ATAC_objects_combined, dims = 2:50, reduction = 'lsi')

# Calculate FindVariableFeatures
RNA_objects_FindVariableFeatures <- FindVariableFeatures(object=RNA_objects_combined , selection.method = "vst",nfeatures = 3000) # Consider the 2000 genes
RNA_objects_combined             <- NormalizeData(RNA_objects_combined, normalization.method = "LogNormalize", scale.factor = 10000)
RNA_objects_combined             <- ScaleData(RNA_objects_combined,block.size = 1000,do.scale = TRUE,do.center = TRUE,features=VariableFeatures(object = RNA_objects_FindVariableFeatures))
RNA_objects_combined             <- RunPCA(RNA_objects_combined, features = VariableFeatures(object = RNA_objects_FindVariableFeatures))
RNA_objects_combined             <- RunUMAP(RNA_objects_combined, dims = 1:50)
#####################################################################################
# Quality control - add  too mitocondrial percentage to quality control plot
DimPlot_ATAC_objects_combined<-DimPlot(ATAC_objects_combined, group.by = 'dataset', pt.size = 0.1) + ggtitle("ATAC-M1/M2/M3")
DimPlot_RNA_objects_combined<-DimPlot(RNA_objects_combined, group.by = 'dataset', pt.size = 0.1) + ggtitle("cDNA-M1/M2/M3")

# FindClusters_resolution
png(filename=paste(output_dir,"DimPlotsRaw.png",sep=""), width = 24, height = 12, res=600, units = "cm")
	grid.arrange(DimPlot_ATAC_objects_combined, DimPlot_RNA_objects_combined, nrow = 1)
dev.off()
